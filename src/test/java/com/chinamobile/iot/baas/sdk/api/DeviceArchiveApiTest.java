/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.model.AddArchive;
import com.chinamobile.iot.baas.sdk.model.ArchiveIdResponse;
import com.chinamobile.iot.baas.sdk.model.FindMongoDataWithDeviceIdRequest;
import com.chinamobile.iot.baas.sdk.model.JSONObject;
import com.chinamobile.iot.baas.sdk.model.MongoDataWithDeviceIdRequest;
import com.chinamobile.iot.baas.sdk.model.UpdateArchive;
import org.junit.Ignore;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Before;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceArchiveApi
 */
@Ignore
public class DeviceArchiveApiTest {

    private String accessId = "";
    private String accessKey = "";
    private static Logger logger = LoggerFactory.getLogger(DeviceArchiveApiTest.class);
    private String sessionToken;
    private String appToken = "";
    private String basePath = "http://demo.heclouds.com/baasapi";

    private final DeviceArchiveApi api = new DeviceArchiveApi(basePath,accessId,accessKey);

      @Before
        public void getSessionToken(){
            AuthApi authApi = new AuthApi(basePath,accessId,accessKey);
            String loginName = "";
            String password = "";
            try {
                sessionToken = authApi.loginPostSessionToken(appToken, loginName, password);
                logger.info("获取sessionToken成功,session-token： "+sessionToken);
            }catch (Exception e){
                logger.error("获取sessionToken失败： "+e.getMessage());
            }
        }

    
    /**
     * 新增设备档案
     *
     * 新增设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addArchivesUsingPOSTTest() throws ApiException {
        AddArchive addArchive = null;
        ArchiveIdResponse response = api.addArchivesUsingPOST(addArchive,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 根据设备id删除设备档案
     *
     * 删除设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteArchiveByDeviceIdUsingDELETETest() throws ApiException {
        String archiveName = null;
        String deviceId = null;
        api.deleteArchiveByDeviceIdUsingDELETE(sessionToken,archiveName,deviceId);

        // TODO: test validations
    }
    
    /**
     * 根据sql删除设备档案
     *
     * 根据sql删除设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteArchivesBySQLUsingDELETETest() throws ApiException {
        MongoDataWithDeviceIdRequest findMongoDataRequest = null;
        api.deleteArchivesBySQLUsingDELETE(findMongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 删除设备档案
     *
     * 删除设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteArchivesUsingDELETETest() throws ApiException {
        String archiveName = null;
        String archiveId = null;
        api.deleteArchivesUsingDELETE(sessionToken,archiveName,archiveId);

        // TODO: test validations
    }
    
    /**
     * 查询设备档案列表
     *
     * 查询设备档案列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findArchivesUsingPOSTTest() throws ApiException {
        FindMongoDataWithDeviceIdRequest mongoDataRequest = null;
        List<JSONObject> response = api.findArchivesUsingPOST(mongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 根据设备id查询设备档案
     *
     * 根据设备id查询设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSingleArchiveByDeviceIdUsingGETTest() throws ApiException {
        String archiveName = null;
        String deviceId = null;
        Object response = api.findSingleArchiveByDeviceIdUsingGET(sessionToken,archiveName,deviceId);

        // TODO: test validations
    }
    
    /**
     * 查询单个设备档案
     *
     * 查询单个设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSingleArchiveUsingGETTest() throws ApiException {
        String archiveName = null;
        String archiveId = null;
        Object response = api.findSingleArchiveUsingGET(sessionToken,archiveName,archiveId);

        // TODO: test validations
    }
    
    /**
     * 修改设备档案
     *
     * 修改设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateArchiveByIdUsingPUTTest() throws ApiException {
        UpdateArchive updateArchive = null;
        api.updateArchiveByIdUsingPUT(updateArchive,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 根据SQL语句修改设备档案
     *
     * 根据SQL语句修改设备档案
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateArchivesUsingPUTTest() throws ApiException {
        MongoDataWithDeviceIdRequest findMongoDataRequest = null;
        api.updateArchivesUsingPUT(findMongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
}
