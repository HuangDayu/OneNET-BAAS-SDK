/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.model.AddDevice;
import com.chinamobile.iot.baas.sdk.model.AssignDevice;
import com.chinamobile.iot.baas.sdk.model.DeviceImport;
import com.chinamobile.iot.baas.sdk.model.DeviceImportResponse;
import com.chinamobile.iot.baas.sdk.model.DeviceSingleImportResponse;
import com.chinamobile.iot.baas.sdk.model.Devices;
import com.chinamobile.iot.baas.sdk.model.PageInfoDevicesDTO;
import com.chinamobile.iot.baas.sdk.model.UpdateDevice;
import org.junit.Ignore;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Before;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceApi
 */
@Ignore
public class DeviceApiTest {

    private String accessId = "";
    private String accessKey = "";
    private static Logger logger = LoggerFactory.getLogger(DeviceApiTest.class);
    private String sessionToken;
    private String appToken = "";
    private String basePath = "http://demo.heclouds.com/baasapi";

    private final DeviceApi api = new DeviceApi(basePath,accessId,accessKey);

      @Before
        public void getSessionToken(){
            AuthApi authApi = new AuthApi(basePath,accessId,accessKey);
            String loginName = "";
            String password = "";
            try {
                sessionToken = authApi.loginPostSessionToken(appToken, loginName, password);
                logger.info("获取sessionToken成功,session-token： "+sessionToken);
            }catch (Exception e){
                logger.error("获取sessionToken失败： "+e.getMessage());
            }
        }

    
    /**
     * 导入单个设备
     *
     * 导入单个设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDeviceUsingPOSTTest() throws ApiException {
        AddDevice addDevice = null;
        DeviceSingleImportResponse response = api.addDeviceUsingPOST(addDevice,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 批量导入设备
     *
     * 批量导入设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDevicesUsingPOSTTest() throws ApiException {
        DeviceImport deviceImport = null;
        DeviceImportResponse response = api.addDevicesUsingPOST(deviceImport,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 分配设备
     *
     * 分配设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignDevicesUsingPUTTest() throws ApiException {
        AssignDevice assignDevice = null;
        api.assignDevicesUsingPUT(assignDevice,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 删除设备
     *
     * 删除设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDevicesUsingDELETETest() throws ApiException {
        String deviceId = null;
        api.deleteDevicesUsingDELETE(deviceId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 停用设备
     *
     * 停用设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableDevicesByIdUsingPUTTest() throws ApiException {
        String deviceId = null;
        api.disableDevicesByIdUsingPUT(deviceId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 启用设备
     *
     * 启用设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableDevicesByIdUsingPUTTest() throws ApiException {
        String deviceId = null;
        api.enableDevicesByIdUsingPUT(deviceId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询设备信息
     *
     * 查询设备信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicesByIdUsingGETTest() throws ApiException {
        String deviceId = null;
        Devices response = api.getDevicesByIdUsingGET(deviceId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询设备列表
     *
     * 查询设备列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicesListUsingGETTest() throws ApiException {
        String deviceName = null;
        String deviceStatus = null;
        String deviceGroupId = null;
        String deviceOwner = null;
        String beginTime = null;
        String endTime = null;
        String pageNum = null;
        String pageSize = null;
        PageInfoDevicesDTO response = api.getDevicesListUsingGET(sessionToken,deviceName,deviceStatus,deviceGroupId,deviceOwner,beginTime,endTime,pageNum,pageSize);

        // TODO: test validations
    }
    
    /**
     * 编辑设备
     *
     * 编辑设备
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDevicesUsingPUTTest() throws ApiException {
        String deviceId = null;
        UpdateDevice updateDevice = null;
        api.updateDevicesUsingPUT(deviceId,updateDevice,sessionToken);

        // TODO: test validations
    }
    
}
