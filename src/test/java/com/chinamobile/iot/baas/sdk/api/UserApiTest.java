/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.model.AddUserRequest;
import com.chinamobile.iot.baas.sdk.model.PageInfoUserDTO;
import com.chinamobile.iot.baas.sdk.model.Password;
import com.chinamobile.iot.baas.sdk.model.RegisterUserRequest;
import com.chinamobile.iot.baas.sdk.model.UpdateUserRequest;
import com.chinamobile.iot.baas.sdk.model.UserDTO;
import com.chinamobile.iot.baas.sdk.model.UserIdResponse;
import org.junit.Ignore;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Before;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private String accessId = "";
    private String accessKey = "";
    private static Logger logger = LoggerFactory.getLogger(UserApiTest.class);
    private String sessionToken;
    private String appToken = "";
    private String basePath = "http://demo.heclouds.com/baasapi";

    private final UserApi api = new UserApi(basePath,accessId,accessKey);

      @Before
        public void getSessionToken(){
            AuthApi authApi = new AuthApi(basePath,accessId,accessKey);
            String loginName = "";
            String password = "";
            try {
                sessionToken = authApi.loginPostSessionToken(appToken, loginName, password);
                logger.info("获取sessionToken成功,session-token： "+sessionToken);
            }catch (Exception e){
                logger.error("获取sessionToken失败： "+e.getMessage());
            }
        }

    
    /**
     * 删除子用户
     *
     * 删除子用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserByUserIdUsingDELETETest() throws ApiException {
        Integer userId = null;
        api.deleteUserByUserIdUsingDELETE(userId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 停用子用户
     *
     * 停用子用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableUserUsingPUTTest() throws ApiException {
        Integer userId = null;
        api.disableUserUsingPUT(userId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 启用子用户
     *
     * 启用子用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableUserUsingPUTTest() throws ApiException {
        Integer userId = null;
        api.enableUserUsingPUT(userId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询单个用户
     *
     * 查询单个用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByUserIdUsingGETTest() throws ApiException {
        Integer userId = null;
        UserDTO response = api.getUserByUserIdUsingGET(userId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询用户列表
     *
     * 查询用户列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUsingGETTest() throws ApiException {
        String loginName = null;
        String status = null;
        String email = null;
        String mobile = null;
        String roleId = null;
        String pageNum = null;
        String pageSize = null;
        PageInfoUserDTO response = api.getUsersUsingGET(sessionToken,loginName,status,email,mobile,roleId,pageNum,pageSize);

        // TODO: test validations
    }
    
    /**
     * 增加用户
     *
     * 增加用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertUserUsingPOSTTest() throws ApiException {
        AddUserRequest addUserRequest = null;
        UserIdResponse response = api.insertUserUsingPOST(addUserRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询子用户列表
     *
     * 查询子用户列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryChildInfoUsingGETTest() throws ApiException {
        Integer userId = null;
        String pageNum = null;
        String pageSize = null;
        PageInfoUserDTO response = api.queryChildInfoUsingGET(userId,sessionToken,pageNum,pageSize);

        // TODO: test validations
    }
    
    /**
     * 注册用户
     *
     * 注册用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUserUsingPOSTTest() throws ApiException {
        RegisterUserRequest registerUserRequest = null;
        String appToken = null;
        UserIdResponse response = api.registerUserUsingPOST(registerUserRequest,appToken);

        // TODO: test validations
    }
    
    /**
     * 重置子用户密码
     *
     * 重置子用户密码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordUsingPUTTest() throws ApiException {
        Integer userId = null;
        api.resetPasswordUsingPUT(userId,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 修改密码
     *
     * 修改密码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePasswordUsingPUTTest() throws ApiException {
        Password password = null;
        api.updatePasswordUsingPUT(password,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 编辑子用户
     *
     * 编辑子用户
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPUTTest() throws ApiException {
        UpdateUserRequest updateUserRequest = null;
        Integer userId = null;
        api.updateUserUsingPUT(updateUserRequest,userId,sessionToken);

        // TODO: test validations
    }
    
}
