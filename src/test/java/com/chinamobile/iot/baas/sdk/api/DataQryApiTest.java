/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.model.AddExternalData;
import com.chinamobile.iot.baas.sdk.model.ExternalDataIdResponse;
import com.chinamobile.iot.baas.sdk.model.FindMongoDataRequest;
import com.chinamobile.iot.baas.sdk.model.FindMongoDataWithDeviceIdRequest;
import com.chinamobile.iot.baas.sdk.model.JSONObject;
import com.chinamobile.iot.baas.sdk.model.MongoDataRequest;
import com.chinamobile.iot.baas.sdk.model.UpdateExternalData;
import org.junit.Ignore;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Before;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataQryApi
 */
@Ignore
public class DataQryApiTest {

    private String accessId = "";
    private String accessKey = "";
    private static Logger logger = LoggerFactory.getLogger(DataQryApiTest.class);
    private String sessionToken;
    private String appToken = "";
    private String basePath = "http://demo.heclouds.com/baasapi";

    private final DataQryApi api = new DataQryApi(basePath,accessId,accessKey);

      @Before
        public void getSessionToken(){
            AuthApi authApi = new AuthApi(basePath,accessId,accessKey);
            String loginName = "";
            String password = "";
            try {
                sessionToken = authApi.loginPostSessionToken(appToken, loginName, password);
                logger.info("获取sessionToken成功,session-token： "+sessionToken);
            }catch (Exception e){
                logger.error("获取sessionToken失败： "+e.getMessage());
            }
        }

    
    /**
     * 添加外部数据
     *
     * 添加外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExternalDataUsingPOSTTest() throws ApiException {
        AddExternalData addExternalData = null;
        ExternalDataIdResponse response = api.addExternalDataUsingPOST(addExternalData,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 根据sql删除外部数据
     *
     * 根据sql删除外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalDataBySQLUsingDELETETest() throws ApiException {
        MongoDataRequest mongoDataRequest = null;
        api.deleteExternalDataBySQLUsingDELETE(mongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 删除外部数据
     *
     * 删除外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExternalDataUsingDELETETest() throws ApiException {
        String externalDataName = null;
        String recordId = null;
        api.deleteExternalDataUsingDELETE(sessionToken,externalDataName,recordId);

        // TODO: test validations
    }
    
    /**
     * 查询告警数据
     *
     * 查询告警数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDeviceAlarmUsingPOSTTest() throws ApiException {
        FindMongoDataRequest findMongoDataRequest = null;
        List<JSONObject> response = api.findDeviceAlarmUsingPOST(findMongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询全局设备数据
     *
     * 查询全局设备数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDeviceDataUsingPOSTTest() throws ApiException {
        FindMongoDataWithDeviceIdRequest mongoDataRequest = null;
        List<JSONObject> response = api.findDeviceDataUsingPOST(mongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 根据id查询某一条外部数据
     *
     * 根据id查询某一条外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findExternalDataByIdUsingGETTest() throws ApiException {
        String id = null;
        String externalDataName = null;
        Object response = api.findExternalDataByIdUsingGET(sessionToken,id,externalDataName);

        // TODO: test validations
    }
    
    /**
     * 查询外部数据
     *
     * 查询外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findExternalDataUsingPOSTTest() throws ApiException {
        FindMongoDataRequest findMongoDataRequest = null;
        List<JSONObject> response = api.findExternalDataUsingPOST(findMongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询离线统计数据
     *
     * 查询离线统计数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findStatTaskDataUsingPOSTTest() throws ApiException {
        FindMongoDataRequest findMongoDataRequest = null;
        List<JSONObject> response = api.findStatTaskDataUsingPOST(findMongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询统计数据
     *
     * 查询统计数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findStatisticsDataUsingPOSTTest() throws ApiException {
        FindMongoDataRequest findMongoDataRequest = null;
        List<JSONObject> response = api.findStatisticsDataUsingPOST(findMongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 查询表配置信息
     *
     * 查询表配置信息，返回格式：{   \&quot;tableName\&quot;: [     {       \&quot;field_desc\&quot;: \&quot;求均值\&quot;,       \&quot;field_type\&quot;: \&quot;6\&quot;,       \&quot;field_name\&quot;: \&quot;avgZ\&quot;        ......    }    ......  ] }其中field_type，1：String；2：int；3：Float；4：Boolean；5：Long；6：Double；7：Date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTableConfigUsingGETTest() throws ApiException {
        Integer tableType = null;
        String tableName = null;
        Map<String, List> response = api.findTableConfigUsingGET(sessionToken,tableType,tableName);

        // TODO: test validations
    }
    
    /**
     * 修改外部数据
     *
     * 修改外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExternalDataByIdUsingPUTTest() throws ApiException {
        UpdateExternalData updateExternalData = null;
        api.updateExternalDataByIdUsingPUT(updateExternalData,sessionToken);

        // TODO: test validations
    }
    
    /**
     * 根据sql修改外部数据
     *
     * 根据sql修改外部数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExternalDataUsingPUTTest() throws ApiException {
        MongoDataRequest mongoDataRequest = null;
        api.updateExternalDataUsingPUT(mongoDataRequest,sessionToken);

        // TODO: test validations
    }
    
}
