/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.PageInfoSqlTemplate;
import com.chinamobile.iot.baas.sdk.model.SqlTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SqlTemplateApi {
    private ApiClient apiClient;

    public SqlTemplateApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public SqlTemplateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for findTemplateByIdUsingGET
     * @param sqlTemplateId sqlTemplateId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findTemplateByIdUsingGETCall(Integer sqlTemplateId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/sqlTemplates/{sqlTemplateId}"
            .replaceAll("\\{" + "sqlTemplateId" + "\\}", apiClient.escapeString(sqlTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (sqlTemplateId != null)
        params.put("sqlTemplateId",sqlTemplateId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findTemplateByIdUsingGETValidateBeforeCall(Integer sqlTemplateId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sqlTemplateId' is set
        if (sqlTemplateId == null) {
            throw new ApiException("Missing the required parameter 'sqlTemplateId' when calling findTemplateByIdUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findTemplateByIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findTemplateByIdUsingGETCall(sqlTemplateId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询指定sql模版
     * 查询指定sql模版
     * @param sqlTemplateId sqlTemplateId (required)
     * @param sessionToken session-token (required)
     * @return SqlTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SqlTemplate findTemplateByIdUsingGET(Integer sqlTemplateId, String sessionToken) throws ApiException {
        ApiResponse<SqlTemplate> resp = findTemplateByIdUsingGETWithHttpInfo(sqlTemplateId, sessionToken);
        return resp.getData();
    }

    /**
     * 查询指定sql模版
     * 查询指定sql模版
     * @param sqlTemplateId sqlTemplateId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;SqlTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SqlTemplate> findTemplateByIdUsingGETWithHttpInfo(Integer sqlTemplateId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findTemplateByIdUsingGETValidateBeforeCall(sqlTemplateId, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<SqlTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询指定sql模版 (asynchronously)
     * 查询指定sql模版
     * @param sqlTemplateId sqlTemplateId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTemplateByIdUsingGETAsync(Integer sqlTemplateId, String sessionToken, final ApiCallback<SqlTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTemplateByIdUsingGETValidateBeforeCall(sqlTemplateId, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SqlTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplatesUsingGET
     * @param sessionToken session-token (required)
     * @param sqlType 模板sql类型:（0：查询；1：新增；2：修改；3：删除） (optional)
     * @param sqlTemplateType 模板类型（1：默认模板；2：自定义模板） (optional)
     * @param sqlTemplateName 模板名（模糊查询） (optional)
     * @param sqlDataTypes 模板数据类型，多个用逗号隔开(2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据；8：档案和转换数据；9：统计数据、告警数据和外部数据) (optional)
     * @param pageNum 当前页 (optional)
     * @param pageSize 每页多少条 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplatesUsingGETCall(String sessionToken, String sqlType, String sqlTemplateType, String sqlTemplateName, String sqlDataTypes, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/sqlTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (sqlType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sqlType", sqlType));

       if (sqlTemplateType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sqlTemplateType", sqlTemplateType));

       if (sqlTemplateName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sqlTemplateName", sqlTemplateName));

       if (sqlDataTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sqlDataTypes", sqlDataTypes));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (sqlType != null)
        params.put("sqlType",sqlType);
       if (sqlTemplateType != null)
        params.put("sqlTemplateType",sqlTemplateType);
       if (sqlTemplateName != null)
        params.put("sqlTemplateName",sqlTemplateName);
       if (sqlDataTypes != null)
        params.put("sqlDataTypes",sqlDataTypes);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplatesUsingGETValidateBeforeCall(String sessionToken, String sqlType, String sqlTemplateType, String sqlTemplateName, String sqlDataTypes, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getTemplatesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTemplatesUsingGETCall(sessionToken, sqlType, sqlTemplateType, sqlTemplateName, sqlDataTypes, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询sql模版列表
     * 查询sql模版列表
     * @param sessionToken session-token (required)
     * @param sqlType 模板sql类型:（0：查询；1：新增；2：修改；3：删除） (optional)
     * @param sqlTemplateType 模板类型（1：默认模板；2：自定义模板） (optional)
     * @param sqlTemplateName 模板名（模糊查询） (optional)
     * @param sqlDataTypes 模板数据类型，多个用逗号隔开(2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据；8：档案和转换数据；9：统计数据、告警数据和外部数据) (optional)
     * @param pageNum 当前页 (optional)
     * @param pageSize 每页多少条 (optional)
     * @return PageInfoSqlTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoSqlTemplate getTemplatesUsingGET(String sessionToken, String sqlType, String sqlTemplateType, String sqlTemplateName, String sqlDataTypes, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoSqlTemplate> resp = getTemplatesUsingGETWithHttpInfo(sessionToken, sqlType, sqlTemplateType, sqlTemplateName, sqlDataTypes, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询sql模版列表
     * 查询sql模版列表
     * @param sessionToken session-token (required)
     * @param sqlType 模板sql类型:（0：查询；1：新增；2：修改；3：删除） (optional)
     * @param sqlTemplateType 模板类型（1：默认模板；2：自定义模板） (optional)
     * @param sqlTemplateName 模板名（模糊查询） (optional)
     * @param sqlDataTypes 模板数据类型，多个用逗号隔开(2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据；8：档案和转换数据；9：统计数据、告警数据和外部数据) (optional)
     * @param pageNum 当前页 (optional)
     * @param pageSize 每页多少条 (optional)
     * @return ApiResponse&lt;PageInfoSqlTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoSqlTemplate> getTemplatesUsingGETWithHttpInfo(String sessionToken, String sqlType, String sqlTemplateType, String sqlTemplateName, String sqlDataTypes, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getTemplatesUsingGETValidateBeforeCall(sessionToken, sqlType, sqlTemplateType, sqlTemplateName, sqlDataTypes, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoSqlTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询sql模版列表 (asynchronously)
     * 查询sql模版列表
     * @param sessionToken session-token (required)
     * @param sqlType 模板sql类型:（0：查询；1：新增；2：修改；3：删除） (optional)
     * @param sqlTemplateType 模板类型（1：默认模板；2：自定义模板） (optional)
     * @param sqlTemplateName 模板名（模糊查询） (optional)
     * @param sqlDataTypes 模板数据类型，多个用逗号隔开(2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据；8：档案和转换数据；9：统计数据、告警数据和外部数据) (optional)
     * @param pageNum 当前页 (optional)
     * @param pageSize 每页多少条 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplatesUsingGETAsync(String sessionToken, String sqlType, String sqlTemplateType, String sqlTemplateName, String sqlDataTypes, String pageNum, String pageSize, final ApiCallback<PageInfoSqlTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplatesUsingGETValidateBeforeCall(sessionToken, sqlType, sqlTemplateType, sqlTemplateName, sqlDataTypes, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoSqlTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
