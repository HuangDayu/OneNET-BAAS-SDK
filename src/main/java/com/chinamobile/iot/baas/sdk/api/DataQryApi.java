/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.AddExternalData;
import com.chinamobile.iot.baas.sdk.model.ExternalDataIdResponse;
import com.chinamobile.iot.baas.sdk.model.FindMongoDataRequest;
import com.chinamobile.iot.baas.sdk.model.FindMongoDataWithDeviceIdRequest;
import com.chinamobile.iot.baas.sdk.model.JSONObject;
import com.chinamobile.iot.baas.sdk.model.MongoDataRequest;
import com.chinamobile.iot.baas.sdk.model.UpdateExternalData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataQryApi {
    private ApiClient apiClient;

    public DataQryApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public DataQryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addExternalDataUsingPOST
     * @param addExternalData addExternalData (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExternalDataUsingPOSTCall(AddExternalData addExternalData, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addExternalData;

        // create path and map variables
        String localVarPath = "/v1.0/externalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExternalDataUsingPOSTValidateBeforeCall(AddExternalData addExternalData, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addExternalData' is set
        if (addExternalData == null) {
            throw new ApiException("Missing the required parameter 'addExternalData' when calling addExternalDataUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling addExternalDataUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addExternalDataUsingPOSTCall(addExternalData, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 添加外部数据
     * 添加外部数据
     * @param addExternalData addExternalData (required)
     * @param sessionToken session-token (required)
     * @return ExternalDataIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalDataIdResponse addExternalDataUsingPOST(AddExternalData addExternalData, String sessionToken) throws ApiException {
        ApiResponse<ExternalDataIdResponse> resp = addExternalDataUsingPOSTWithHttpInfo(addExternalData, sessionToken);
        return resp.getData();
    }

    /**
     * 添加外部数据
     * 添加外部数据
     * @param addExternalData addExternalData (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;ExternalDataIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalDataIdResponse> addExternalDataUsingPOSTWithHttpInfo(AddExternalData addExternalData, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = addExternalDataUsingPOSTValidateBeforeCall(addExternalData, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<ExternalDataIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 添加外部数据 (asynchronously)
     * 添加外部数据
     * @param addExternalData addExternalData (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExternalDataUsingPOSTAsync(AddExternalData addExternalData, String sessionToken, final ApiCallback<ExternalDataIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExternalDataUsingPOSTValidateBeforeCall(addExternalData, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalDataIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExternalDataBySQLUsingDELETE
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExternalDataBySQLUsingDELETECall(MongoDataRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/deleteExternalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExternalDataBySQLUsingDELETEValidateBeforeCall(MongoDataRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mongoDataRequest' is set
        if (mongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'mongoDataRequest' when calling deleteExternalDataBySQLUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteExternalDataBySQLUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExternalDataBySQLUsingDELETECall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据sql删除外部数据
     * 根据sql删除外部数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExternalDataBySQLUsingDELETE(MongoDataRequest mongoDataRequest, String sessionToken) throws ApiException {
        deleteExternalDataBySQLUsingDELETEWithHttpInfo(mongoDataRequest, sessionToken);
    }

    /**
     * 根据sql删除外部数据
     * 根据sql删除外部数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExternalDataBySQLUsingDELETEWithHttpInfo(MongoDataRequest mongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteExternalDataBySQLUsingDELETEValidateBeforeCall(mongoDataRequest, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 根据sql删除外部数据 (asynchronously)
     * 根据sql删除外部数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExternalDataBySQLUsingDELETEAsync(MongoDataRequest mongoDataRequest, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExternalDataBySQLUsingDELETEValidateBeforeCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteExternalDataUsingDELETE
     * @param sessionToken session-token (required)
     * @param externalDataName 外部数据名 (required)
     * @param recordId 外部数据id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExternalDataUsingDELETECall(String sessionToken, String externalDataName, String recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/externalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (externalDataName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("externalDataName", externalDataName));

       if (recordId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordId", recordId));

        Map<String,Object> params = new HashMap<>();

       if (externalDataName != null)
        params.put("externalDataName",externalDataName);
       if (recordId != null)
        params.put("recordId",recordId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExternalDataUsingDELETEValidateBeforeCall(String sessionToken, String externalDataName, String recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteExternalDataUsingDELETE(Async)");
        }
        
        // verify the required parameter 'externalDataName' is set
        if (externalDataName == null) {
            throw new ApiException("Missing the required parameter 'externalDataName' when calling deleteExternalDataUsingDELETE(Async)");
        }
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling deleteExternalDataUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExternalDataUsingDELETECall(sessionToken, externalDataName, recordId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 删除外部数据
     * 删除外部数据
     * @param sessionToken session-token (required)
     * @param externalDataName 外部数据名 (required)
     * @param recordId 外部数据id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExternalDataUsingDELETE(String sessionToken, String externalDataName, String recordId) throws ApiException {
        deleteExternalDataUsingDELETEWithHttpInfo(sessionToken, externalDataName, recordId);
    }

    /**
     * 删除外部数据
     * 删除外部数据
     * @param sessionToken session-token (required)
     * @param externalDataName 外部数据名 (required)
     * @param recordId 外部数据id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExternalDataUsingDELETEWithHttpInfo(String sessionToken, String externalDataName, String recordId) throws ApiException {
        com.squareup.okhttp.Call call = deleteExternalDataUsingDELETEValidateBeforeCall(sessionToken, externalDataName, recordId, null, null);
        return apiClient.execute(call);
    }

    /**
     * 删除外部数据 (asynchronously)
     * 删除外部数据
     * @param sessionToken session-token (required)
     * @param externalDataName 外部数据名 (required)
     * @param recordId 外部数据id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExternalDataUsingDELETEAsync(String sessionToken, String externalDataName, String recordId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExternalDataUsingDELETEValidateBeforeCall(sessionToken, externalDataName, recordId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for findDeviceAlarmUsingPOST
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findDeviceAlarmUsingPOSTCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = findMongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/queryAlarms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findDeviceAlarmUsingPOSTValidateBeforeCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'findMongoDataRequest' is set
        if (findMongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'findMongoDataRequest' when calling findDeviceAlarmUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findDeviceAlarmUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = findDeviceAlarmUsingPOSTCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询告警数据
     * 查询告警数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return List&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JSONObject> findDeviceAlarmUsingPOST(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        ApiResponse<List<JSONObject>> resp = findDeviceAlarmUsingPOSTWithHttpInfo(findMongoDataRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 查询告警数据
     * 查询告警数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;List&lt;JSONObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JSONObject>> findDeviceAlarmUsingPOSTWithHttpInfo(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findDeviceAlarmUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询告警数据 (asynchronously)
     * 查询告警数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findDeviceAlarmUsingPOSTAsync(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ApiCallback<List<JSONObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findDeviceAlarmUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findDeviceDataUsingPOST
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findDeviceDataUsingPOSTCall(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/queryData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findDeviceDataUsingPOSTValidateBeforeCall(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mongoDataRequest' is set
        if (mongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'mongoDataRequest' when calling findDeviceDataUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findDeviceDataUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = findDeviceDataUsingPOSTCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询全局设备数据
     * 查询全局设备数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return List&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JSONObject> findDeviceDataUsingPOST(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken) throws ApiException {
        ApiResponse<List<JSONObject>> resp = findDeviceDataUsingPOSTWithHttpInfo(mongoDataRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 查询全局设备数据
     * 查询全局设备数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;List&lt;JSONObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JSONObject>> findDeviceDataUsingPOSTWithHttpInfo(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findDeviceDataUsingPOSTValidateBeforeCall(mongoDataRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询全局设备数据 (asynchronously)
     * 查询全局设备数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findDeviceDataUsingPOSTAsync(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken, final ApiCallback<List<JSONObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findDeviceDataUsingPOSTValidateBeforeCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findExternalDataByIdUsingGET
     * @param sessionToken session-token (required)
     * @param id 外部数据id (required)
     * @param externalDataName 外部数据名 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findExternalDataByIdUsingGETCall(String sessionToken, String id, String externalDataName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/externalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

       if (externalDataName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("externalDataName", externalDataName));

        Map<String,Object> params = new HashMap<>();

       if (id != null)
        params.put("id",id);
       if (externalDataName != null)
        params.put("externalDataName",externalDataName);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findExternalDataByIdUsingGETValidateBeforeCall(String sessionToken, String id, String externalDataName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findExternalDataByIdUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findExternalDataByIdUsingGET(Async)");
        }
        
        // verify the required parameter 'externalDataName' is set
        if (externalDataName == null) {
            throw new ApiException("Missing the required parameter 'externalDataName' when calling findExternalDataByIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findExternalDataByIdUsingGETCall(sessionToken, id, externalDataName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据id查询某一条外部数据
     * 根据id查询某一条外部数据
     * @param sessionToken session-token (required)
     * @param id 外部数据id (required)
     * @param externalDataName 外部数据名 (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object findExternalDataByIdUsingGET(String sessionToken, String id, String externalDataName) throws ApiException {
        ApiResponse<Object> resp = findExternalDataByIdUsingGETWithHttpInfo(sessionToken, id, externalDataName);
        return resp.getData();
    }

    /**
     * 根据id查询某一条外部数据
     * 根据id查询某一条外部数据
     * @param sessionToken session-token (required)
     * @param id 外部数据id (required)
     * @param externalDataName 外部数据名 (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> findExternalDataByIdUsingGETWithHttpInfo(String sessionToken, String id, String externalDataName) throws ApiException {
        com.squareup.okhttp.Call call = findExternalDataByIdUsingGETValidateBeforeCall(sessionToken, id, externalDataName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 根据id查询某一条外部数据 (asynchronously)
     * 根据id查询某一条外部数据
     * @param sessionToken session-token (required)
     * @param id 外部数据id (required)
     * @param externalDataName 外部数据名 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findExternalDataByIdUsingGETAsync(String sessionToken, String id, String externalDataName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findExternalDataByIdUsingGETValidateBeforeCall(sessionToken, id, externalDataName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findExternalDataUsingPOST
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findExternalDataUsingPOSTCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = findMongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/queryExternalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findExternalDataUsingPOSTValidateBeforeCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'findMongoDataRequest' is set
        if (findMongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'findMongoDataRequest' when calling findExternalDataUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findExternalDataUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = findExternalDataUsingPOSTCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询外部数据
     * 查询外部数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return List&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JSONObject> findExternalDataUsingPOST(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        ApiResponse<List<JSONObject>> resp = findExternalDataUsingPOSTWithHttpInfo(findMongoDataRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 查询外部数据
     * 查询外部数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;List&lt;JSONObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JSONObject>> findExternalDataUsingPOSTWithHttpInfo(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findExternalDataUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询外部数据 (asynchronously)
     * 查询外部数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findExternalDataUsingPOSTAsync(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ApiCallback<List<JSONObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findExternalDataUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findStatTaskDataUsingPOST
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findStatTaskDataUsingPOSTCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = findMongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/queryStatTaskData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findStatTaskDataUsingPOSTValidateBeforeCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'findMongoDataRequest' is set
        if (findMongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'findMongoDataRequest' when calling findStatTaskDataUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findStatTaskDataUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = findStatTaskDataUsingPOSTCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询离线统计数据
     * 查询离线统计数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return List&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JSONObject> findStatTaskDataUsingPOST(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        ApiResponse<List<JSONObject>> resp = findStatTaskDataUsingPOSTWithHttpInfo(findMongoDataRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 查询离线统计数据
     * 查询离线统计数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;List&lt;JSONObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JSONObject>> findStatTaskDataUsingPOSTWithHttpInfo(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findStatTaskDataUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询离线统计数据 (asynchronously)
     * 查询离线统计数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findStatTaskDataUsingPOSTAsync(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ApiCallback<List<JSONObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findStatTaskDataUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findStatisticsDataUsingPOST
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findStatisticsDataUsingPOSTCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = findMongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/queryStats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findStatisticsDataUsingPOSTValidateBeforeCall(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'findMongoDataRequest' is set
        if (findMongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'findMongoDataRequest' when calling findStatisticsDataUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findStatisticsDataUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = findStatisticsDataUsingPOSTCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询统计数据
     * 查询统计数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return List&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JSONObject> findStatisticsDataUsingPOST(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        ApiResponse<List<JSONObject>> resp = findStatisticsDataUsingPOSTWithHttpInfo(findMongoDataRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 查询统计数据
     * 查询统计数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;List&lt;JSONObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JSONObject>> findStatisticsDataUsingPOSTWithHttpInfo(FindMongoDataRequest findMongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findStatisticsDataUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询统计数据 (asynchronously)
     * 查询统计数据
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findStatisticsDataUsingPOSTAsync(FindMongoDataRequest findMongoDataRequest, String sessionToken, final ApiCallback<List<JSONObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findStatisticsDataUsingPOSTValidateBeforeCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findTableConfigUsingGET
     * @param sessionToken session-token (required)
     * @param tableType 表类型,2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据； (required)
     * @param tableName 表名 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findTableConfigUsingGETCall(String sessionToken, Integer tableType, String tableName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/queryTableConfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (tableType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tableType", tableType));

       if (tableName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tableName", tableName));

        Map<String,Object> params = new HashMap<>();

       if (tableType != null)
        params.put("tableType",tableType);
       if (tableName != null)
        params.put("tableName",tableName);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findTableConfigUsingGETValidateBeforeCall(String sessionToken, Integer tableType, String tableName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findTableConfigUsingGET(Async)");
        }
        
        // verify the required parameter 'tableType' is set
        if (tableType == null) {
            throw new ApiException("Missing the required parameter 'tableType' when calling findTableConfigUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findTableConfigUsingGETCall(sessionToken, tableType, tableName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询表配置信息
     * 查询表配置信息，返回格式：{   \&quot;tableName\&quot;: [     {       \&quot;field_desc\&quot;: \&quot;求均值\&quot;,       \&quot;field_type\&quot;: \&quot;6\&quot;,       \&quot;field_name\&quot;: \&quot;avgZ\&quot;        ......    }    ......  ] }其中field_type，1：String；2：int；3：Float；4：Boolean；5：Long；6：Double；7：Date
     * @param sessionToken session-token (required)
     * @param tableType 表类型,2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据； (required)
     * @param tableName 表名 (optional)
     * @return Map&lt;String, List&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, List> findTableConfigUsingGET(String sessionToken, Integer tableType, String tableName) throws ApiException {
        ApiResponse<Map<String, List>> resp = findTableConfigUsingGETWithHttpInfo(sessionToken, tableType, tableName);
        return resp.getData();
    }

    /**
     * 查询表配置信息
     * 查询表配置信息，返回格式：{   \&quot;tableName\&quot;: [     {       \&quot;field_desc\&quot;: \&quot;求均值\&quot;,       \&quot;field_type\&quot;: \&quot;6\&quot;,       \&quot;field_name\&quot;: \&quot;avgZ\&quot;        ......    }    ......  ] }其中field_type，1：String；2：int；3：Float；4：Boolean；5：Long；6：Double；7：Date
     * @param sessionToken session-token (required)
     * @param tableType 表类型,2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据； (required)
     * @param tableName 表名 (optional)
     * @return ApiResponse&lt;Map&lt;String, List&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, List>> findTableConfigUsingGETWithHttpInfo(String sessionToken, Integer tableType, String tableName) throws ApiException {
        com.squareup.okhttp.Call call = findTableConfigUsingGETValidateBeforeCall(sessionToken, tableType, tableName, null, null);
        Type localVarReturnType = new TypeToken<Map<String, List>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询表配置信息 (asynchronously)
     * 查询表配置信息，返回格式：{   \&quot;tableName\&quot;: [     {       \&quot;field_desc\&quot;: \&quot;求均值\&quot;,       \&quot;field_type\&quot;: \&quot;6\&quot;,       \&quot;field_name\&quot;: \&quot;avgZ\&quot;        ......    }    ......  ] }其中field_type，1：String；2：int；3：Float；4：Boolean；5：Long；6：Double；7：Date
     * @param sessionToken session-token (required)
     * @param tableType 表类型,2：转换数据；3：实时统计数据；4：告警数据；5：离线统计数据；6：外部数据；7：档案数据； (required)
     * @param tableName 表名 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTableConfigUsingGETAsync(String sessionToken, Integer tableType, String tableName, final ApiCallback<Map<String, List>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTableConfigUsingGETValidateBeforeCall(sessionToken, tableType, tableName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, List>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExternalDataByIdUsingPUT
     * @param updateExternalData updateExternalData (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExternalDataByIdUsingPUTCall(UpdateExternalData updateExternalData, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateExternalData;

        // create path and map variables
        String localVarPath = "/v1.0/externalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExternalDataByIdUsingPUTValidateBeforeCall(UpdateExternalData updateExternalData, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateExternalData' is set
        if (updateExternalData == null) {
            throw new ApiException("Missing the required parameter 'updateExternalData' when calling updateExternalDataByIdUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updateExternalDataByIdUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExternalDataByIdUsingPUTCall(updateExternalData, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 修改外部数据
     * 修改外部数据
     * @param updateExternalData updateExternalData (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExternalDataByIdUsingPUT(UpdateExternalData updateExternalData, String sessionToken) throws ApiException {
        updateExternalDataByIdUsingPUTWithHttpInfo(updateExternalData, sessionToken);
    }

    /**
     * 修改外部数据
     * 修改外部数据
     * @param updateExternalData updateExternalData (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExternalDataByIdUsingPUTWithHttpInfo(UpdateExternalData updateExternalData, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updateExternalDataByIdUsingPUTValidateBeforeCall(updateExternalData, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 修改外部数据 (asynchronously)
     * 修改外部数据
     * @param updateExternalData updateExternalData (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExternalDataByIdUsingPUTAsync(UpdateExternalData updateExternalData, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExternalDataByIdUsingPUTValidateBeforeCall(updateExternalData, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExternalDataUsingPUT
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExternalDataUsingPUTCall(MongoDataRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/updateExternalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExternalDataUsingPUTValidateBeforeCall(MongoDataRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mongoDataRequest' is set
        if (mongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'mongoDataRequest' when calling updateExternalDataUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updateExternalDataUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExternalDataUsingPUTCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据sql修改外部数据
     * 根据sql修改外部数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExternalDataUsingPUT(MongoDataRequest mongoDataRequest, String sessionToken) throws ApiException {
        updateExternalDataUsingPUTWithHttpInfo(mongoDataRequest, sessionToken);
    }

    /**
     * 根据sql修改外部数据
     * 根据sql修改外部数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExternalDataUsingPUTWithHttpInfo(MongoDataRequest mongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updateExternalDataUsingPUTValidateBeforeCall(mongoDataRequest, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 根据sql修改外部数据 (asynchronously)
     * 根据sql修改外部数据
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExternalDataUsingPUTAsync(MongoDataRequest mongoDataRequest, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExternalDataUsingPUTValidateBeforeCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
