/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.AddDeviceShares;
import com.chinamobile.iot.baas.sdk.model.FindDeviceSharesRsp;
import com.chinamobile.iot.baas.sdk.model.PageInfoDeviceSharesDTO;
import com.chinamobile.iot.baas.sdk.model.ShareIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceShareApi {
    private ApiClient apiClient;

    public DeviceShareApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public DeviceShareApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDeviceSharesUsingPOST
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDeviceSharesUsingPOSTCall(AddDeviceShares request, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1.0/devices/shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDeviceSharesUsingPOSTValidateBeforeCall(AddDeviceShares request, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling addDeviceSharesUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling addDeviceSharesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addDeviceSharesUsingPOSTCall(request, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 新增设备分享信息
     * 新增设备分享信息
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @return ShareIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShareIdResponse addDeviceSharesUsingPOST(AddDeviceShares request, String sessionToken) throws ApiException {
        ApiResponse<ShareIdResponse> resp = addDeviceSharesUsingPOSTWithHttpInfo(request, sessionToken);
        return resp.getData();
    }

    /**
     * 新增设备分享信息
     * 新增设备分享信息
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;ShareIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShareIdResponse> addDeviceSharesUsingPOSTWithHttpInfo(AddDeviceShares request, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = addDeviceSharesUsingPOSTValidateBeforeCall(request, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<ShareIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增设备分享信息 (asynchronously)
     * 新增设备分享信息
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDeviceSharesUsingPOSTAsync(AddDeviceShares request, String sessionToken, final ApiCallback<ShareIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDeviceSharesUsingPOSTValidateBeforeCall(request, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShareIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeviceSharesUsingDELETE
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceSharesUsingDELETECall(Integer shareId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/shares/{shareId}"
            .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (shareId != null)
        params.put("shareId",shareId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeviceSharesUsingDELETEValidateBeforeCall(Integer shareId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling deleteDeviceSharesUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteDeviceSharesUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDeviceSharesUsingDELETECall(shareId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 收回设备分享
     * 收回设备分享
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDeviceSharesUsingDELETE(Integer shareId, String sessionToken) throws ApiException {
        deleteDeviceSharesUsingDELETEWithHttpInfo(shareId, sessionToken);
    }

    /**
     * 收回设备分享
     * 收回设备分享
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDeviceSharesUsingDELETEWithHttpInfo(Integer shareId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeviceSharesUsingDELETEValidateBeforeCall(shareId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 收回设备分享 (asynchronously)
     * 收回设备分享
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceSharesUsingDELETEAsync(Integer shareId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeviceSharesUsingDELETEValidateBeforeCall(shareId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDeviceShareOthersUsingGET
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param toUserLoginName 被分享者登录名 (optional)
     * @param toUserUserName 被分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceShareOthersUsingGETCall(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/shares/shareOthers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (toUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toUserLoginName", toUserLoginName));

       if (toUserUserName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toUserUserName", toUserUserName));

       if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));

       if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (toUserLoginName != null)
        params.put("toUserLoginName",toUserLoginName);
       if (toUserUserName != null)
        params.put("toUserUserName",toUserUserName);
       if (startDate != null)
        params.put("startDate",startDate);
       if (endDate != null)
        params.put("endDate",endDate);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceShareOthersUsingGETValidateBeforeCall(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceShareOthersUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceShareOthersUsingGETCall(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询分享出去的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param toUserLoginName 被分享者登录名 (optional)
     * @param toUserUserName 被分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDeviceSharesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDeviceSharesDTO getDeviceShareOthersUsingGET(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDeviceSharesDTO> resp = getDeviceShareOthersUsingGETWithHttpInfo(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询分享出去的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param toUserLoginName 被分享者登录名 (optional)
     * @param toUserUserName 被分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDeviceSharesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDeviceSharesDTO> getDeviceShareOthersUsingGETWithHttpInfo(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceShareOthersUsingGETValidateBeforeCall(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDeviceSharesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询分享出去的设备列表 (asynchronously)
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param toUserLoginName 被分享者登录名 (optional)
     * @param toUserUserName 被分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceShareOthersUsingGETAsync(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ApiCallback<PageInfoDeviceSharesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceShareOthersUsingGETValidateBeforeCall(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDeviceSharesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceShareSelfUsingGET
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param fromUserLoginName 分享者登录名 (optional)
     * @param fromUserUserName 分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceShareSelfUsingGETCall(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/shares/shareSelf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (fromUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromUserLoginName", fromUserLoginName));

       if (fromUserUserName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromUserUserName", fromUserUserName));

       if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));

       if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (fromUserLoginName != null)
        params.put("fromUserLoginName",fromUserLoginName);
       if (fromUserUserName != null)
        params.put("fromUserUserName",fromUserUserName);
       if (startDate != null)
        params.put("startDate",startDate);
       if (endDate != null)
        params.put("endDate",endDate);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceShareSelfUsingGETValidateBeforeCall(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceShareSelfUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceShareSelfUsingGETCall(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询分享给自己的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param fromUserLoginName 分享者登录名 (optional)
     * @param fromUserUserName 分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDeviceSharesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDeviceSharesDTO getDeviceShareSelfUsingGET(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDeviceSharesDTO> resp = getDeviceShareSelfUsingGETWithHttpInfo(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询分享给自己的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param fromUserLoginName 分享者登录名 (optional)
     * @param fromUserUserName 分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDeviceSharesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDeviceSharesDTO> getDeviceShareSelfUsingGETWithHttpInfo(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceShareSelfUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDeviceSharesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询分享给自己的设备列表 (asynchronously)
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备id (optional)
     * @param fromUserLoginName 分享者登录名 (optional)
     * @param fromUserUserName 分享者用户名 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceShareSelfUsingGETAsync(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ApiCallback<PageInfoDeviceSharesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceShareSelfUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDeviceSharesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceSharesByIdUsingGET
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceSharesByIdUsingGETCall(Integer shareId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/shares/{shareId}"
            .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (shareId != null)
        params.put("shareId",shareId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceSharesByIdUsingGETValidateBeforeCall(Integer shareId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling getDeviceSharesByIdUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceSharesByIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceSharesByIdUsingGETCall(shareId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备分享信息
     * 查询设备分享信息
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @return FindDeviceSharesRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FindDeviceSharesRsp getDeviceSharesByIdUsingGET(Integer shareId, String sessionToken) throws ApiException {
        ApiResponse<FindDeviceSharesRsp> resp = getDeviceSharesByIdUsingGETWithHttpInfo(shareId, sessionToken);
        return resp.getData();
    }

    /**
     * 查询设备分享信息
     * 查询设备分享信息
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;FindDeviceSharesRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FindDeviceSharesRsp> getDeviceSharesByIdUsingGETWithHttpInfo(Integer shareId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceSharesByIdUsingGETValidateBeforeCall(shareId, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<FindDeviceSharesRsp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备分享信息 (asynchronously)
     * 查询设备分享信息
     * @param shareId shareId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceSharesByIdUsingGETAsync(Integer shareId, String sessionToken, final ApiCallback<FindDeviceSharesRsp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceSharesByIdUsingGETValidateBeforeCall(shareId, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FindDeviceSharesRsp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceSharesListUsingGET
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 分享人 (optional)
     * @param toUserLoginName 被分享人 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceSharesListUsingGETCall(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (fromUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromUserLoginName", fromUserLoginName));

       if (toUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toUserLoginName", toUserLoginName));

       if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));

       if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (fromUserLoginName != null)
        params.put("fromUserLoginName",fromUserLoginName);
       if (toUserLoginName != null)
        params.put("toUserLoginName",toUserLoginName);
       if (startDate != null)
        params.put("startDate",startDate);
       if (endDate != null)
        params.put("endDate",endDate);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceSharesListUsingGETValidateBeforeCall(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceSharesListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceSharesListUsingGETCall(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备分享信息列表(仅超管可用)
     * 查询设备分享信息列表(仅超管可用)
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 分享人 (optional)
     * @param toUserLoginName 被分享人 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDeviceSharesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDeviceSharesDTO getDeviceSharesListUsingGET(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDeviceSharesDTO> resp = getDeviceSharesListUsingGETWithHttpInfo(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询设备分享信息列表(仅超管可用)
     * 查询设备分享信息列表(仅超管可用)
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 分享人 (optional)
     * @param toUserLoginName 被分享人 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDeviceSharesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDeviceSharesDTO> getDeviceSharesListUsingGETWithHttpInfo(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceSharesListUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDeviceSharesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备分享信息列表(仅超管可用) (asynchronously)
     * 查询设备分享信息列表(仅超管可用)
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 分享人 (optional)
     * @param toUserLoginName 被分享人 (optional)
     * @param startDate 开始时间 (optional)
     * @param endDate 结束时间 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceSharesListUsingGETAsync(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize, final ApiCallback<PageInfoDeviceSharesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceSharesListUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDeviceSharesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
