/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.AddDeviceDelegations;
import com.chinamobile.iot.baas.sdk.model.DelegateIdResponse;
import com.chinamobile.iot.baas.sdk.model.DeviceDelegationsResponse;
import com.chinamobile.iot.baas.sdk.model.PageInfoDeviceDelegationsDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceDelegationApi {
    private ApiClient apiClient;

    public DeviceDelegationApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public DeviceDelegationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDeviceDelegationsUsingPOST
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDeviceDelegationsUsingPOSTCall(AddDeviceDelegations request, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1.0/devices/delegations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDeviceDelegationsUsingPOSTValidateBeforeCall(AddDeviceDelegations request, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling addDeviceDelegationsUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling addDeviceDelegationsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addDeviceDelegationsUsingPOSTCall(request, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 新增设备转授
     * 新增设备转授
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @return DelegateIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DelegateIdResponse addDeviceDelegationsUsingPOST(AddDeviceDelegations request, String sessionToken) throws ApiException {
        ApiResponse<DelegateIdResponse> resp = addDeviceDelegationsUsingPOSTWithHttpInfo(request, sessionToken);
        return resp.getData();
    }

    /**
     * 新增设备转授
     * 新增设备转授
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;DelegateIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DelegateIdResponse> addDeviceDelegationsUsingPOSTWithHttpInfo(AddDeviceDelegations request, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = addDeviceDelegationsUsingPOSTValidateBeforeCall(request, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<DelegateIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增设备转授 (asynchronously)
     * 新增设备转授
     * @param request request (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDeviceDelegationsUsingPOSTAsync(AddDeviceDelegations request, String sessionToken, final ApiCallback<DelegateIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDeviceDelegationsUsingPOSTValidateBeforeCall(request, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DelegateIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDeviceDelegationsUsingDELETE
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceDelegationsUsingDELETECall(Integer delegateId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/delegations/{delegateId}"
            .replaceAll("\\{" + "delegateId" + "\\}", apiClient.escapeString(delegateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (delegateId != null)
        params.put("delegateId",delegateId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeviceDelegationsUsingDELETEValidateBeforeCall(Integer delegateId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'delegateId' is set
        if (delegateId == null) {
            throw new ApiException("Missing the required parameter 'delegateId' when calling deleteDeviceDelegationsUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteDeviceDelegationsUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDeviceDelegationsUsingDELETECall(delegateId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 收回设备转授
     * 收回设备转授
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDeviceDelegationsUsingDELETE(Integer delegateId, String sessionToken) throws ApiException {
        deleteDeviceDelegationsUsingDELETEWithHttpInfo(delegateId, sessionToken);
    }

    /**
     * 收回设备转授
     * 收回设备转授
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDeviceDelegationsUsingDELETEWithHttpInfo(Integer delegateId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeviceDelegationsUsingDELETEValidateBeforeCall(delegateId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 收回设备转授 (asynchronously)
     * 收回设备转授
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeviceDelegationsUsingDELETEAsync(Integer delegateId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeviceDelegationsUsingDELETEValidateBeforeCall(delegateId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDeviceDelegateOthersUsingGET
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param toUserLoginName 被转授人loginName (optional)
     * @param toUserUserName 被转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegateOthersUsingGETCall(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/delegations/delegateOthers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (toUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toUserLoginName", toUserLoginName));

       if (toUserUserName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toUserUserName", toUserUserName));

       if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));

       if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (toUserLoginName != null)
        params.put("toUserLoginName",toUserLoginName);
       if (toUserUserName != null)
        params.put("toUserUserName",toUserUserName);
       if (startDate != null)
        params.put("startDate",startDate);
       if (endDate != null)
        params.put("endDate",endDate);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceDelegateOthersUsingGETValidateBeforeCall(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceDelegateOthersUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceDelegateOthersUsingGETCall(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询转授出去的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param toUserLoginName 被转授人loginName (optional)
     * @param toUserUserName 被转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDeviceDelegationsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDeviceDelegationsDTO getDeviceDelegateOthersUsingGET(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDeviceDelegationsDTO> resp = getDeviceDelegateOthersUsingGETWithHttpInfo(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询转授出去的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param toUserLoginName 被转授人loginName (optional)
     * @param toUserUserName 被转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDeviceDelegationsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDeviceDelegationsDTO> getDeviceDelegateOthersUsingGETWithHttpInfo(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceDelegateOthersUsingGETValidateBeforeCall(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDeviceDelegationsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询转授出去的设备列表 (asynchronously)
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param toUserLoginName 被转授人loginName (optional)
     * @param toUserUserName 被转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegateOthersUsingGETAsync(String sessionToken, String deviceId, String toUserLoginName, String toUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ApiCallback<PageInfoDeviceDelegationsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceDelegateOthersUsingGETValidateBeforeCall(sessionToken, deviceId, toUserLoginName, toUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDeviceDelegationsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceDelegateSelfUsingGET
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人loginName (optional)
     * @param fromUserUserName 转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegateSelfUsingGETCall(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/delegations/delegateSelf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (fromUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromUserLoginName", fromUserLoginName));

       if (fromUserUserName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromUserUserName", fromUserUserName));

       if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));

       if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (fromUserLoginName != null)
        params.put("fromUserLoginName",fromUserLoginName);
       if (fromUserUserName != null)
        params.put("fromUserUserName",fromUserUserName);
       if (startDate != null)
        params.put("startDate",startDate);
       if (endDate != null)
        params.put("endDate",endDate);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceDelegateSelfUsingGETValidateBeforeCall(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceDelegateSelfUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceDelegateSelfUsingGETCall(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询转授给自己的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人loginName (optional)
     * @param fromUserUserName 转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDeviceDelegationsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDeviceDelegationsDTO getDeviceDelegateSelfUsingGET(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDeviceDelegationsDTO> resp = getDeviceDelegateSelfUsingGETWithHttpInfo(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询转授给自己的设备列表
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人loginName (optional)
     * @param fromUserUserName 转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDeviceDelegationsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDeviceDelegationsDTO> getDeviceDelegateSelfUsingGETWithHttpInfo(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceDelegateSelfUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDeviceDelegationsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询转授给自己的设备列表 (asynchronously)
     * 
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人loginName (optional)
     * @param fromUserUserName 转授人userName (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegateSelfUsingGETAsync(String sessionToken, String deviceId, String fromUserLoginName, String fromUserUserName, String startDate, String endDate, String pageNum, String pageSize, final ApiCallback<PageInfoDeviceDelegationsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceDelegateSelfUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, fromUserUserName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDeviceDelegationsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceDelegationsByIdUsingGET
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegationsByIdUsingGETCall(Integer delegateId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/delegations/{delegateId}"
            .replaceAll("\\{" + "delegateId" + "\\}", apiClient.escapeString(delegateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (delegateId != null)
        params.put("delegateId",delegateId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceDelegationsByIdUsingGETValidateBeforeCall(Integer delegateId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'delegateId' is set
        if (delegateId == null) {
            throw new ApiException("Missing the required parameter 'delegateId' when calling getDeviceDelegationsByIdUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceDelegationsByIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceDelegationsByIdUsingGETCall(delegateId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备转授
     * 查询设备转授
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @return DeviceDelegationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceDelegationsResponse getDeviceDelegationsByIdUsingGET(Integer delegateId, String sessionToken) throws ApiException {
        ApiResponse<DeviceDelegationsResponse> resp = getDeviceDelegationsByIdUsingGETWithHttpInfo(delegateId, sessionToken);
        return resp.getData();
    }

    /**
     * 查询设备转授
     * 查询设备转授
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;DeviceDelegationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceDelegationsResponse> getDeviceDelegationsByIdUsingGETWithHttpInfo(Integer delegateId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceDelegationsByIdUsingGETValidateBeforeCall(delegateId, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<DeviceDelegationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备转授 (asynchronously)
     * 查询设备转授
     * @param delegateId delegateId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegationsByIdUsingGETAsync(Integer delegateId, String sessionToken, final ApiCallback<DeviceDelegationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceDelegationsByIdUsingGETValidateBeforeCall(delegateId, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceDelegationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeviceDelegationsListUsingGET
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人 (optional)
     * @param toUserLoginName 被转授人 (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegationsListUsingGETCall(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/delegations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (fromUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromUserLoginName", fromUserLoginName));

       if (toUserLoginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toUserLoginName", toUserLoginName));

       if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));

       if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (fromUserLoginName != null)
        params.put("fromUserLoginName",fromUserLoginName);
       if (toUserLoginName != null)
        params.put("toUserLoginName",toUserLoginName);
       if (startDate != null)
        params.put("startDate",startDate);
       if (endDate != null)
        params.put("endDate",endDate);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeviceDelegationsListUsingGETValidateBeforeCall(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDeviceDelegationsListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeviceDelegationsListUsingGETCall(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备转授列表(仅超管可用)
     * 查询设备转授列表(仅超管可用)
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人 (optional)
     * @param toUserLoginName 被转授人 (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDeviceDelegationsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDeviceDelegationsDTO getDeviceDelegationsListUsingGET(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDeviceDelegationsDTO> resp = getDeviceDelegationsListUsingGETWithHttpInfo(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询设备转授列表(仅超管可用)
     * 查询设备转授列表(仅超管可用)
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人 (optional)
     * @param toUserLoginName 被转授人 (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDeviceDelegationsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDeviceDelegationsDTO> getDeviceDelegationsListUsingGETWithHttpInfo(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDeviceDelegationsListUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDeviceDelegationsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备转授列表(仅超管可用) (asynchronously)
     * 查询设备转授列表(仅超管可用)
     * @param sessionToken session-token (required)
     * @param deviceId 设备ID (optional)
     * @param fromUserLoginName 转授人 (optional)
     * @param toUserLoginName 被转授人 (optional)
     * @param startDate 开始日期 (optional)
     * @param endDate 截止日期 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeviceDelegationsListUsingGETAsync(String sessionToken, String deviceId, String fromUserLoginName, String toUserLoginName, String startDate, String endDate, String pageNum, String pageSize, final ApiCallback<PageInfoDeviceDelegationsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeviceDelegationsListUsingGETValidateBeforeCall(sessionToken, deviceId, fromUserLoginName, toUserLoginName, startDate, endDate, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDeviceDelegationsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
