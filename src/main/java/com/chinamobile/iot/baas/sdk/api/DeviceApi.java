/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.AddDevice;
import com.chinamobile.iot.baas.sdk.model.AssignDevice;
import com.chinamobile.iot.baas.sdk.model.DeviceImport;
import com.chinamobile.iot.baas.sdk.model.DeviceImportResponse;
import com.chinamobile.iot.baas.sdk.model.DeviceSingleImportResponse;
import com.chinamobile.iot.baas.sdk.model.Devices;
import com.chinamobile.iot.baas.sdk.model.PageInfoDevicesDTO;
import com.chinamobile.iot.baas.sdk.model.UpdateDevice;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceApi {
    private ApiClient apiClient;

    public DeviceApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public DeviceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDeviceUsingPOST
     * @param addDevice addDevice (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDeviceUsingPOSTCall(AddDevice addDevice, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addDevice;

        // create path and map variables
        String localVarPath = "/v1.0/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDeviceUsingPOSTValidateBeforeCall(AddDevice addDevice, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addDevice' is set
        if (addDevice == null) {
            throw new ApiException("Missing the required parameter 'addDevice' when calling addDeviceUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling addDeviceUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addDeviceUsingPOSTCall(addDevice, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 导入单个设备
     * 导入单个设备
     * @param addDevice addDevice (required)
     * @param sessionToken session-token (required)
     * @return DeviceSingleImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceSingleImportResponse addDeviceUsingPOST(AddDevice addDevice, String sessionToken) throws ApiException {
        ApiResponse<DeviceSingleImportResponse> resp = addDeviceUsingPOSTWithHttpInfo(addDevice, sessionToken);
        return resp.getData();
    }

    /**
     * 导入单个设备
     * 导入单个设备
     * @param addDevice addDevice (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;DeviceSingleImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceSingleImportResponse> addDeviceUsingPOSTWithHttpInfo(AddDevice addDevice, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = addDeviceUsingPOSTValidateBeforeCall(addDevice, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<DeviceSingleImportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 导入单个设备 (asynchronously)
     * 导入单个设备
     * @param addDevice addDevice (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDeviceUsingPOSTAsync(AddDevice addDevice, String sessionToken, final ApiCallback<DeviceSingleImportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDeviceUsingPOSTValidateBeforeCall(addDevice, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceSingleImportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addDevicesUsingPOST
     * @param deviceImport deviceImport (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDevicesUsingPOSTCall(DeviceImport deviceImport, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceImport;

        // create path and map variables
        String localVarPath = "/v1.0/devices/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDevicesUsingPOSTValidateBeforeCall(DeviceImport deviceImport, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceImport' is set
        if (deviceImport == null) {
            throw new ApiException("Missing the required parameter 'deviceImport' when calling addDevicesUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling addDevicesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addDevicesUsingPOSTCall(deviceImport, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 批量导入设备
     * 批量导入设备
     * @param deviceImport deviceImport (required)
     * @param sessionToken session-token (required)
     * @return DeviceImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceImportResponse addDevicesUsingPOST(DeviceImport deviceImport, String sessionToken) throws ApiException {
        ApiResponse<DeviceImportResponse> resp = addDevicesUsingPOSTWithHttpInfo(deviceImport, sessionToken);
        return resp.getData();
    }

    /**
     * 批量导入设备
     * 批量导入设备
     * @param deviceImport deviceImport (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;DeviceImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceImportResponse> addDevicesUsingPOSTWithHttpInfo(DeviceImport deviceImport, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = addDevicesUsingPOSTValidateBeforeCall(deviceImport, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<DeviceImportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 批量导入设备 (asynchronously)
     * 批量导入设备
     * @param deviceImport deviceImport (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDevicesUsingPOSTAsync(DeviceImport deviceImport, String sessionToken, final ApiCallback<DeviceImportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDevicesUsingPOSTValidateBeforeCall(deviceImport, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceImportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignDevicesUsingPUT
     * @param assignDevice assignDevice (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignDevicesUsingPUTCall(AssignDevice assignDevice, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = assignDevice;

        // create path and map variables
        String localVarPath = "/v1.0/devices/assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignDevicesUsingPUTValidateBeforeCall(AssignDevice assignDevice, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assignDevice' is set
        if (assignDevice == null) {
            throw new ApiException("Missing the required parameter 'assignDevice' when calling assignDevicesUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling assignDevicesUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = assignDevicesUsingPUTCall(assignDevice, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 分配设备
     * 分配设备
     * @param assignDevice assignDevice (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void assignDevicesUsingPUT(AssignDevice assignDevice, String sessionToken) throws ApiException {
        assignDevicesUsingPUTWithHttpInfo(assignDevice, sessionToken);
    }

    /**
     * 分配设备
     * 分配设备
     * @param assignDevice assignDevice (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> assignDevicesUsingPUTWithHttpInfo(AssignDevice assignDevice, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = assignDevicesUsingPUTValidateBeforeCall(assignDevice, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 分配设备 (asynchronously)
     * 分配设备
     * @param assignDevice assignDevice (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignDevicesUsingPUTAsync(AssignDevice assignDevice, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignDevicesUsingPUTValidateBeforeCall(assignDevice, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDevicesUsingDELETE
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDevicesUsingDELETECall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDevicesUsingDELETEValidateBeforeCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteDevicesUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteDevicesUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDevicesUsingDELETECall(deviceId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 删除设备
     * 删除设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDevicesUsingDELETE(String deviceId, String sessionToken) throws ApiException {
        deleteDevicesUsingDELETEWithHttpInfo(deviceId, sessionToken);
    }

    /**
     * 删除设备
     * 删除设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDevicesUsingDELETEWithHttpInfo(String deviceId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteDevicesUsingDELETEValidateBeforeCall(deviceId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 删除设备 (asynchronously)
     * 删除设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDevicesUsingDELETEAsync(String deviceId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDevicesUsingDELETEValidateBeforeCall(deviceId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableDevicesByIdUsingPUT
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableDevicesByIdUsingPUTCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/disable/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableDevicesByIdUsingPUTValidateBeforeCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling disableDevicesByIdUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling disableDevicesByIdUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = disableDevicesByIdUsingPUTCall(deviceId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 停用设备
     * 停用设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableDevicesByIdUsingPUT(String deviceId, String sessionToken) throws ApiException {
        disableDevicesByIdUsingPUTWithHttpInfo(deviceId, sessionToken);
    }

    /**
     * 停用设备
     * 停用设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableDevicesByIdUsingPUTWithHttpInfo(String deviceId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = disableDevicesByIdUsingPUTValidateBeforeCall(deviceId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 停用设备 (asynchronously)
     * 停用设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableDevicesByIdUsingPUTAsync(String deviceId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableDevicesByIdUsingPUTValidateBeforeCall(deviceId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enableDevicesByIdUsingPUT
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableDevicesByIdUsingPUTCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/enable/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableDevicesByIdUsingPUTValidateBeforeCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling enableDevicesByIdUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling enableDevicesByIdUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = enableDevicesByIdUsingPUTCall(deviceId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 启用设备
     * 启用设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void enableDevicesByIdUsingPUT(String deviceId, String sessionToken) throws ApiException {
        enableDevicesByIdUsingPUTWithHttpInfo(deviceId, sessionToken);
    }

    /**
     * 启用设备
     * 启用设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> enableDevicesByIdUsingPUTWithHttpInfo(String deviceId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = enableDevicesByIdUsingPUTValidateBeforeCall(deviceId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 启用设备 (asynchronously)
     * 启用设备
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableDevicesByIdUsingPUTAsync(String deviceId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableDevicesByIdUsingPUTValidateBeforeCall(deviceId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDevicesByIdUsingGET
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDevicesByIdUsingGETCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/info/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDevicesByIdUsingGETValidateBeforeCall(String deviceId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getDevicesByIdUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDevicesByIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDevicesByIdUsingGETCall(deviceId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备信息
     * 查询设备信息
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @return Devices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Devices getDevicesByIdUsingGET(String deviceId, String sessionToken) throws ApiException {
        ApiResponse<Devices> resp = getDevicesByIdUsingGETWithHttpInfo(deviceId, sessionToken);
        return resp.getData();
    }

    /**
     * 查询设备信息
     * 查询设备信息
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Devices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Devices> getDevicesByIdUsingGETWithHttpInfo(String deviceId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = getDevicesByIdUsingGETValidateBeforeCall(deviceId, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<Devices>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备信息 (asynchronously)
     * 查询设备信息
     * @param deviceId deviceId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDevicesByIdUsingGETAsync(String deviceId, String sessionToken, final ApiCallback<Devices> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDevicesByIdUsingGETValidateBeforeCall(deviceId, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Devices>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDevicesListUsingGET
     * @param sessionToken session-token (required)
     * @param deviceName 设备名 (optional)
     * @param deviceStatus 设备状态 (optional)
     * @param deviceGroupId 设备分组 (optional)
     * @param deviceOwner 设备所有者loginName (optional)
     * @param beginTime 起始时间限制 (optional)
     * @param endTime 结束时间限制 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDevicesListUsingGETCall(String sessionToken, String deviceName, String deviceStatus, String deviceGroupId, String deviceOwner, String beginTime, String endTime, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (deviceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceName", deviceName));

       if (deviceStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceStatus", deviceStatus));

       if (deviceGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceGroupId", deviceGroupId));

       if (deviceOwner != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceOwner", deviceOwner));

       if (beginTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("beginTime", beginTime));

       if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (deviceName != null)
        params.put("deviceName",deviceName);
       if (deviceStatus != null)
        params.put("deviceStatus",deviceStatus);
       if (deviceGroupId != null)
        params.put("deviceGroupId",deviceGroupId);
       if (deviceOwner != null)
        params.put("deviceOwner",deviceOwner);
       if (beginTime != null)
        params.put("beginTime",beginTime);
       if (endTime != null)
        params.put("endTime",endTime);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDevicesListUsingGETValidateBeforeCall(String sessionToken, String deviceName, String deviceStatus, String deviceGroupId, String deviceOwner, String beginTime, String endTime, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getDevicesListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDevicesListUsingGETCall(sessionToken, deviceName, deviceStatus, deviceGroupId, deviceOwner, beginTime, endTime, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备列表
     * 查询设备列表
     * @param sessionToken session-token (required)
     * @param deviceName 设备名 (optional)
     * @param deviceStatus 设备状态 (optional)
     * @param deviceGroupId 设备分组 (optional)
     * @param deviceOwner 设备所有者loginName (optional)
     * @param beginTime 起始时间限制 (optional)
     * @param endTime 结束时间限制 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoDevicesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoDevicesDTO getDevicesListUsingGET(String sessionToken, String deviceName, String deviceStatus, String deviceGroupId, String deviceOwner, String beginTime, String endTime, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoDevicesDTO> resp = getDevicesListUsingGETWithHttpInfo(sessionToken, deviceName, deviceStatus, deviceGroupId, deviceOwner, beginTime, endTime, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询设备列表
     * 查询设备列表
     * @param sessionToken session-token (required)
     * @param deviceName 设备名 (optional)
     * @param deviceStatus 设备状态 (optional)
     * @param deviceGroupId 设备分组 (optional)
     * @param deviceOwner 设备所有者loginName (optional)
     * @param beginTime 起始时间限制 (optional)
     * @param endTime 结束时间限制 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoDevicesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoDevicesDTO> getDevicesListUsingGETWithHttpInfo(String sessionToken, String deviceName, String deviceStatus, String deviceGroupId, String deviceOwner, String beginTime, String endTime, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getDevicesListUsingGETValidateBeforeCall(sessionToken, deviceName, deviceStatus, deviceGroupId, deviceOwner, beginTime, endTime, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoDevicesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备列表 (asynchronously)
     * 查询设备列表
     * @param sessionToken session-token (required)
     * @param deviceName 设备名 (optional)
     * @param deviceStatus 设备状态 (optional)
     * @param deviceGroupId 设备分组 (optional)
     * @param deviceOwner 设备所有者loginName (optional)
     * @param beginTime 起始时间限制 (optional)
     * @param endTime 结束时间限制 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDevicesListUsingGETAsync(String sessionToken, String deviceName, String deviceStatus, String deviceGroupId, String deviceOwner, String beginTime, String endTime, String pageNum, String pageSize, final ApiCallback<PageInfoDevicesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDevicesListUsingGETValidateBeforeCall(sessionToken, deviceName, deviceStatus, deviceGroupId, deviceOwner, beginTime, endTime, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoDevicesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDevicesUsingPUT
     * @param deviceId deviceId (required)
     * @param updateDevice updateDevice (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDevicesUsingPUTCall(String deviceId, UpdateDevice updateDevice, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateDevice;

        // create path and map variables
        String localVarPath = "/v1.0/devices/info/{deviceId}"
            .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDevicesUsingPUTValidateBeforeCall(String deviceId, UpdateDevice updateDevice, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateDevicesUsingPUT(Async)");
        }
        
        // verify the required parameter 'updateDevice' is set
        if (updateDevice == null) {
            throw new ApiException("Missing the required parameter 'updateDevice' when calling updateDevicesUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updateDevicesUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDevicesUsingPUTCall(deviceId, updateDevice, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 编辑设备
     * 编辑设备
     * @param deviceId deviceId (required)
     * @param updateDevice updateDevice (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateDevicesUsingPUT(String deviceId, UpdateDevice updateDevice, String sessionToken) throws ApiException {
        updateDevicesUsingPUTWithHttpInfo(deviceId, updateDevice, sessionToken);
    }

    /**
     * 编辑设备
     * 编辑设备
     * @param deviceId deviceId (required)
     * @param updateDevice updateDevice (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateDevicesUsingPUTWithHttpInfo(String deviceId, UpdateDevice updateDevice, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updateDevicesUsingPUTValidateBeforeCall(deviceId, updateDevice, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 编辑设备 (asynchronously)
     * 编辑设备
     * @param deviceId deviceId (required)
     * @param updateDevice updateDevice (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDevicesUsingPUTAsync(String deviceId, UpdateDevice updateDevice, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDevicesUsingPUTValidateBeforeCall(deviceId, updateDevice, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
