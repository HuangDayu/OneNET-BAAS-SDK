/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.AddArchive;
import com.chinamobile.iot.baas.sdk.model.ArchiveIdResponse;
import com.chinamobile.iot.baas.sdk.model.FindMongoDataWithDeviceIdRequest;
import com.chinamobile.iot.baas.sdk.model.JSONObject;
import com.chinamobile.iot.baas.sdk.model.MongoDataWithDeviceIdRequest;
import com.chinamobile.iot.baas.sdk.model.UpdateArchive;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceArchiveApi {
    private ApiClient apiClient;

    public DeviceArchiveApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public DeviceArchiveApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addArchivesUsingPOST
     * @param addArchive addArchive (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addArchivesUsingPOSTCall(AddArchive addArchive, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addArchive;

        // create path and map variables
        String localVarPath = "/v1.0/devices/archives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addArchivesUsingPOSTValidateBeforeCall(AddArchive addArchive, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addArchive' is set
        if (addArchive == null) {
            throw new ApiException("Missing the required parameter 'addArchive' when calling addArchivesUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling addArchivesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = addArchivesUsingPOSTCall(addArchive, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 新增设备档案
     * 新增设备档案
     * @param addArchive addArchive (required)
     * @param sessionToken session-token (required)
     * @return ArchiveIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArchiveIdResponse addArchivesUsingPOST(AddArchive addArchive, String sessionToken) throws ApiException {
        ApiResponse<ArchiveIdResponse> resp = addArchivesUsingPOSTWithHttpInfo(addArchive, sessionToken);
        return resp.getData();
    }

    /**
     * 新增设备档案
     * 新增设备档案
     * @param addArchive addArchive (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;ArchiveIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArchiveIdResponse> addArchivesUsingPOSTWithHttpInfo(AddArchive addArchive, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = addArchivesUsingPOSTValidateBeforeCall(addArchive, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<ArchiveIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 新增设备档案 (asynchronously)
     * 新增设备档案
     * @param addArchive addArchive (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addArchivesUsingPOSTAsync(AddArchive addArchive, String sessionToken, final ApiCallback<ArchiveIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addArchivesUsingPOSTValidateBeforeCall(addArchive, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArchiveIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteArchiveByDeviceIdUsingDELETE
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (required)
     * @param deviceId 设备ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteArchiveByDeviceIdUsingDELETECall(String sessionToken, String archiveName, String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/archivesByDeviceId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (archiveName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archiveName", archiveName));

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

        Map<String,Object> params = new HashMap<>();

       if (archiveName != null)
        params.put("archiveName",archiveName);
       if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteArchiveByDeviceIdUsingDELETEValidateBeforeCall(String sessionToken, String archiveName, String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteArchiveByDeviceIdUsingDELETE(Async)");
        }
        
        // verify the required parameter 'archiveName' is set
        if (archiveName == null) {
            throw new ApiException("Missing the required parameter 'archiveName' when calling deleteArchiveByDeviceIdUsingDELETE(Async)");
        }
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteArchiveByDeviceIdUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteArchiveByDeviceIdUsingDELETECall(sessionToken, archiveName, deviceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据设备id删除设备档案
     * 删除设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (required)
     * @param deviceId 设备ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteArchiveByDeviceIdUsingDELETE(String sessionToken, String archiveName, String deviceId) throws ApiException {
        deleteArchiveByDeviceIdUsingDELETEWithHttpInfo(sessionToken, archiveName, deviceId);
    }

    /**
     * 根据设备id删除设备档案
     * 删除设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (required)
     * @param deviceId 设备ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteArchiveByDeviceIdUsingDELETEWithHttpInfo(String sessionToken, String archiveName, String deviceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteArchiveByDeviceIdUsingDELETEValidateBeforeCall(sessionToken, archiveName, deviceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * 根据设备id删除设备档案 (asynchronously)
     * 删除设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (required)
     * @param deviceId 设备ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteArchiveByDeviceIdUsingDELETEAsync(String sessionToken, String archiveName, String deviceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteArchiveByDeviceIdUsingDELETEValidateBeforeCall(sessionToken, archiveName, deviceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteArchivesBySQLUsingDELETE
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteArchivesBySQLUsingDELETECall(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = findMongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/deleteArchives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteArchivesBySQLUsingDELETEValidateBeforeCall(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'findMongoDataRequest' is set
        if (findMongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'findMongoDataRequest' when calling deleteArchivesBySQLUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteArchivesBySQLUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteArchivesBySQLUsingDELETECall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据sql删除设备档案
     * 根据sql删除设备档案
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteArchivesBySQLUsingDELETE(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken) throws ApiException {
        deleteArchivesBySQLUsingDELETEWithHttpInfo(findMongoDataRequest, sessionToken);
    }

    /**
     * 根据sql删除设备档案
     * 根据sql删除设备档案
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteArchivesBySQLUsingDELETEWithHttpInfo(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteArchivesBySQLUsingDELETEValidateBeforeCall(findMongoDataRequest, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 根据sql删除设备档案 (asynchronously)
     * 根据sql删除设备档案
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteArchivesBySQLUsingDELETEAsync(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteArchivesBySQLUsingDELETEValidateBeforeCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteArchivesUsingDELETE
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteArchivesUsingDELETECall(String sessionToken, String archiveName, String archiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/archives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (archiveName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archiveName", archiveName));

       if (archiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archiveId", archiveId));

        Map<String,Object> params = new HashMap<>();

       if (archiveName != null)
        params.put("archiveName",archiveName);
       if (archiveId != null)
        params.put("archiveId",archiveId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteArchivesUsingDELETEValidateBeforeCall(String sessionToken, String archiveName, String archiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteArchivesUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteArchivesUsingDELETECall(sessionToken, archiveName, archiveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 删除设备档案
     * 删除设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteArchivesUsingDELETE(String sessionToken, String archiveName, String archiveId) throws ApiException {
        deleteArchivesUsingDELETEWithHttpInfo(sessionToken, archiveName, archiveId);
    }

    /**
     * 删除设备档案
     * 删除设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteArchivesUsingDELETEWithHttpInfo(String sessionToken, String archiveName, String archiveId) throws ApiException {
        com.squareup.okhttp.Call call = deleteArchivesUsingDELETEValidateBeforeCall(sessionToken, archiveName, archiveId, null, null);
        return apiClient.execute(call);
    }

    /**
     * 删除设备档案 (asynchronously)
     * 删除设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteArchivesUsingDELETEAsync(String sessionToken, String archiveName, String archiveId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteArchivesUsingDELETEValidateBeforeCall(sessionToken, archiveName, archiveId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for findArchivesUsingPOST
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findArchivesUsingPOSTCall(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/queryArchives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findArchivesUsingPOSTValidateBeforeCall(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mongoDataRequest' is set
        if (mongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'mongoDataRequest' when calling findArchivesUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findArchivesUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = findArchivesUsingPOSTCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询设备档案列表
     * 查询设备档案列表
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return List&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JSONObject> findArchivesUsingPOST(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken) throws ApiException {
        ApiResponse<List<JSONObject>> resp = findArchivesUsingPOSTWithHttpInfo(mongoDataRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 查询设备档案列表
     * 查询设备档案列表
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;List&lt;JSONObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JSONObject>> findArchivesUsingPOSTWithHttpInfo(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = findArchivesUsingPOSTValidateBeforeCall(mongoDataRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询设备档案列表 (asynchronously)
     * 查询设备档案列表
     * @param mongoDataRequest mongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findArchivesUsingPOSTAsync(FindMongoDataWithDeviceIdRequest mongoDataRequest, String sessionToken, final ApiCallback<List<JSONObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findArchivesUsingPOSTValidateBeforeCall(mongoDataRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JSONObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findSingleArchiveByDeviceIdUsingGET
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param deviceId 设备ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSingleArchiveByDeviceIdUsingGETCall(String sessionToken, String archiveName, String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/archivesByDeviceId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (archiveName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archiveName", archiveName));

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

        Map<String,Object> params = new HashMap<>();

       if (archiveName != null)
        params.put("archiveName",archiveName);
       if (deviceId != null)
        params.put("deviceId",deviceId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSingleArchiveByDeviceIdUsingGETValidateBeforeCall(String sessionToken, String archiveName, String deviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findSingleArchiveByDeviceIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findSingleArchiveByDeviceIdUsingGETCall(sessionToken, archiveName, deviceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据设备id查询设备档案
     * 根据设备id查询设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param deviceId 设备ID (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object findSingleArchiveByDeviceIdUsingGET(String sessionToken, String archiveName, String deviceId) throws ApiException {
        ApiResponse<Object> resp = findSingleArchiveByDeviceIdUsingGETWithHttpInfo(sessionToken, archiveName, deviceId);
        return resp.getData();
    }

    /**
     * 根据设备id查询设备档案
     * 根据设备id查询设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param deviceId 设备ID (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> findSingleArchiveByDeviceIdUsingGETWithHttpInfo(String sessionToken, String archiveName, String deviceId) throws ApiException {
        com.squareup.okhttp.Call call = findSingleArchiveByDeviceIdUsingGETValidateBeforeCall(sessionToken, archiveName, deviceId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 根据设备id查询设备档案 (asynchronously)
     * 根据设备id查询设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param deviceId 设备ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSingleArchiveByDeviceIdUsingGETAsync(String sessionToken, String archiveName, String deviceId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSingleArchiveByDeviceIdUsingGETValidateBeforeCall(sessionToken, archiveName, deviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findSingleArchiveUsingGET
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSingleArchiveUsingGETCall(String sessionToken, String archiveName, String archiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/archives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (archiveName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archiveName", archiveName));

       if (archiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archiveId", archiveId));

        Map<String,Object> params = new HashMap<>();

       if (archiveName != null)
        params.put("archiveName",archiveName);
       if (archiveId != null)
        params.put("archiveId",archiveId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSingleArchiveUsingGETValidateBeforeCall(String sessionToken, String archiveName, String archiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling findSingleArchiveUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findSingleArchiveUsingGETCall(sessionToken, archiveName, archiveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询单个设备档案
     * 查询单个设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object findSingleArchiveUsingGET(String sessionToken, String archiveName, String archiveId) throws ApiException {
        ApiResponse<Object> resp = findSingleArchiveUsingGETWithHttpInfo(sessionToken, archiveName, archiveId);
        return resp.getData();
    }

    /**
     * 查询单个设备档案
     * 查询单个设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> findSingleArchiveUsingGETWithHttpInfo(String sessionToken, String archiveName, String archiveId) throws ApiException {
        com.squareup.okhttp.Call call = findSingleArchiveUsingGETValidateBeforeCall(sessionToken, archiveName, archiveId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询单个设备档案 (asynchronously)
     * 查询单个设备档案
     * @param sessionToken session-token (required)
     * @param archiveName 档案类型 (optional)
     * @param archiveId 设备档案ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSingleArchiveUsingGETAsync(String sessionToken, String archiveName, String archiveId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSingleArchiveUsingGETValidateBeforeCall(sessionToken, archiveName, archiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateArchiveByIdUsingPUT
     * @param updateArchive updateArchive (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateArchiveByIdUsingPUTCall(UpdateArchive updateArchive, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateArchive;

        // create path and map variables
        String localVarPath = "/v1.0/devices/archives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateArchiveByIdUsingPUTValidateBeforeCall(UpdateArchive updateArchive, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateArchive' is set
        if (updateArchive == null) {
            throw new ApiException("Missing the required parameter 'updateArchive' when calling updateArchiveByIdUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updateArchiveByIdUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateArchiveByIdUsingPUTCall(updateArchive, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 修改设备档案
     * 修改设备档案
     * @param updateArchive updateArchive (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateArchiveByIdUsingPUT(UpdateArchive updateArchive, String sessionToken) throws ApiException {
        updateArchiveByIdUsingPUTWithHttpInfo(updateArchive, sessionToken);
    }

    /**
     * 修改设备档案
     * 修改设备档案
     * @param updateArchive updateArchive (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateArchiveByIdUsingPUTWithHttpInfo(UpdateArchive updateArchive, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updateArchiveByIdUsingPUTValidateBeforeCall(updateArchive, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 修改设备档案 (asynchronously)
     * 修改设备档案
     * @param updateArchive updateArchive (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateArchiveByIdUsingPUTAsync(UpdateArchive updateArchive, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateArchiveByIdUsingPUTValidateBeforeCall(updateArchive, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateArchivesUsingPUT
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateArchivesUsingPUTCall(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = findMongoDataRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/updateArchives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateArchivesUsingPUTValidateBeforeCall(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'findMongoDataRequest' is set
        if (findMongoDataRequest == null) {
            throw new ApiException("Missing the required parameter 'findMongoDataRequest' when calling updateArchivesUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updateArchivesUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateArchivesUsingPUTCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 根据SQL语句修改设备档案
     * 根据SQL语句修改设备档案
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateArchivesUsingPUT(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken) throws ApiException {
        updateArchivesUsingPUTWithHttpInfo(findMongoDataRequest, sessionToken);
    }

    /**
     * 根据SQL语句修改设备档案
     * 根据SQL语句修改设备档案
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateArchivesUsingPUTWithHttpInfo(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updateArchivesUsingPUTValidateBeforeCall(findMongoDataRequest, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 根据SQL语句修改设备档案 (asynchronously)
     * 根据SQL语句修改设备档案
     * @param findMongoDataRequest findMongoDataRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateArchivesUsingPUTAsync(MongoDataWithDeviceIdRequest findMongoDataRequest, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateArchivesUsingPUTValidateBeforeCall(findMongoDataRequest, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
