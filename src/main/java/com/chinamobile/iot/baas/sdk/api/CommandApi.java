/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.CommandResult;
import com.chinamobile.iot.baas.sdk.model.CommandStatus;
import com.chinamobile.iot.baas.sdk.model.PageInfoCommandStatus;
import com.chinamobile.iot.baas.sdk.model.SendCommandRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommandApi {
    private ApiClient apiClient;

    public CommandApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public CommandApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCommandStatusByCmdUuidUsingGET
     * @param cmdUuid cmdUuid (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommandStatusByCmdUuidUsingGETCall(String cmdUuid, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/commands/send/{cmdUuid}"
            .replaceAll("\\{" + "cmdUuid" + "\\}", apiClient.escapeString(cmdUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (cmdUuid != null)
        params.put("cmdUuid",cmdUuid);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommandStatusByCmdUuidUsingGETValidateBeforeCall(String cmdUuid, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cmdUuid' is set
        if (cmdUuid == null) {
            throw new ApiException("Missing the required parameter 'cmdUuid' when calling getCommandStatusByCmdUuidUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getCommandStatusByCmdUuidUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommandStatusByCmdUuidUsingGETCall(cmdUuid, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询命令状态
     * 查询命令状态
     * @param cmdUuid cmdUuid (required)
     * @param sessionToken session-token (required)
     * @return CommandStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommandStatus getCommandStatusByCmdUuidUsingGET(String cmdUuid, String sessionToken) throws ApiException {
        ApiResponse<CommandStatus> resp = getCommandStatusByCmdUuidUsingGETWithHttpInfo(cmdUuid, sessionToken);
        return resp.getData();
    }

    /**
     * 查询命令状态
     * 查询命令状态
     * @param cmdUuid cmdUuid (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;CommandStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommandStatus> getCommandStatusByCmdUuidUsingGETWithHttpInfo(String cmdUuid, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = getCommandStatusByCmdUuidUsingGETValidateBeforeCall(cmdUuid, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<CommandStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询命令状态 (asynchronously)
     * 查询命令状态
     * @param cmdUuid cmdUuid (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommandStatusByCmdUuidUsingGETAsync(String cmdUuid, String sessionToken, final ApiCallback<CommandStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommandStatusByCmdUuidUsingGETValidateBeforeCall(cmdUuid, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommandStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCommandStatusListUsingGET
     * @param sessionToken session-token (required)
     * @param commandName 命令名称 (optional)
     * @param deviceId 设备ID (optional)
     * @param deviceName 设备名称 (optional)
     * @param status 命令状态 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommandStatusListUsingGETCall(String sessionToken, String commandName, String deviceId, String deviceName, String status, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/devices/commands/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (commandName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commandName", commandName));

       if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));

       if (deviceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceName", deviceName));

       if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (commandName != null)
        params.put("commandName",commandName);
       if (deviceId != null)
        params.put("deviceId",deviceId);
       if (deviceName != null)
        params.put("deviceName",deviceName);
       if (status != null)
        params.put("status",status);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommandStatusListUsingGETValidateBeforeCall(String sessionToken, String commandName, String deviceId, String deviceName, String status, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getCommandStatusListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommandStatusListUsingGETCall(sessionToken, commandName, deviceId, deviceName, status, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询命令状态列表
     * 查询命令状态列表
     * @param sessionToken session-token (required)
     * @param commandName 命令名称 (optional)
     * @param deviceId 设备ID (optional)
     * @param deviceName 设备名称 (optional)
     * @param status 命令状态 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoCommandStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoCommandStatus getCommandStatusListUsingGET(String sessionToken, String commandName, String deviceId, String deviceName, String status, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoCommandStatus> resp = getCommandStatusListUsingGETWithHttpInfo(sessionToken, commandName, deviceId, deviceName, status, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询命令状态列表
     * 查询命令状态列表
     * @param sessionToken session-token (required)
     * @param commandName 命令名称 (optional)
     * @param deviceId 设备ID (optional)
     * @param deviceName 设备名称 (optional)
     * @param status 命令状态 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoCommandStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoCommandStatus> getCommandStatusListUsingGETWithHttpInfo(String sessionToken, String commandName, String deviceId, String deviceName, String status, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getCommandStatusListUsingGETValidateBeforeCall(sessionToken, commandName, deviceId, deviceName, status, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoCommandStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询命令状态列表 (asynchronously)
     * 查询命令状态列表
     * @param sessionToken session-token (required)
     * @param commandName 命令名称 (optional)
     * @param deviceId 设备ID (optional)
     * @param deviceName 设备名称 (optional)
     * @param status 命令状态 (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommandStatusListUsingGETAsync(String sessionToken, String commandName, String deviceId, String deviceName, String status, String pageNum, String pageSize, final ApiCallback<PageInfoCommandStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommandStatusListUsingGETValidateBeforeCall(sessionToken, commandName, deviceId, deviceName, status, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoCommandStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendCommandsUsingPOST
     * @param sendCommandRequest sendCommandRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendCommandsUsingPOSTCall(SendCommandRequest sendCommandRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sendCommandRequest;

        // create path and map variables
        String localVarPath = "/v1.0/devices/commands/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendCommandsUsingPOSTValidateBeforeCall(SendCommandRequest sendCommandRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendCommandRequest' is set
        if (sendCommandRequest == null) {
            throw new ApiException("Missing the required parameter 'sendCommandRequest' when calling sendCommandsUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling sendCommandsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = sendCommandsUsingPOSTCall(sendCommandRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 发送命令
     * 发送命令
     * @param sendCommandRequest sendCommandRequest (required)
     * @param sessionToken session-token (required)
     * @return CommandResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommandResult sendCommandsUsingPOST(SendCommandRequest sendCommandRequest, String sessionToken) throws ApiException {
        ApiResponse<CommandResult> resp = sendCommandsUsingPOSTWithHttpInfo(sendCommandRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 发送命令
     * 发送命令
     * @param sendCommandRequest sendCommandRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;CommandResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommandResult> sendCommandsUsingPOSTWithHttpInfo(SendCommandRequest sendCommandRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = sendCommandsUsingPOSTValidateBeforeCall(sendCommandRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<CommandResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 发送命令 (asynchronously)
     * 发送命令
     * @param sendCommandRequest sendCommandRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendCommandsUsingPOSTAsync(SendCommandRequest sendCommandRequest, String sessionToken, final ApiCallback<CommandResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendCommandsUsingPOSTValidateBeforeCall(sendCommandRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommandResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
