/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.*;
import com.chinamobile.iot.baas.sdk.model.UserIdResponse;
import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.Call;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.URLEncoder;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-26T17:00:09.998+08:00")
public class AuthApi {

    private ApiClient apiClient;

    public AuthApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public AuthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }


    /* Build call for loginUsingPost */
    private Call loginCall(String appToken, String loginName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables 00:0C:29:5F:56:49
        String localVarPath = "/v1.0/login".replaceAll("\\{format\\}", "json");
        Map<String, Object> authParams = new HashMap<String, Object>();
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        try {
            if (appToken != null) {
                localVarFormParams.put("appToken", URLEncoder.encode(appToken, "UTF-8"));
                authParams.put("appToken", URLEncoder.encode(appToken, "UTF-8"));
            }
            if (loginName != null) {
                localVarFormParams.put("loginName", URLEncoder.encode(loginName, "UTF-8"));
                authParams.put("loginName", URLEncoder.encode(loginName, "UTF-8"));
            }
            if (password != null) {
                localVarFormParams.put("password", URLEncoder.encode(password, "UTF-8"));
                authParams.put("password", URLEncoder.encode(password, "UTF-8"));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }

          Map<String,Object> params = new HashMap<>();

          String authCode = "";
           try {
                authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
           } catch (Exception e) {
                e.printStackTrace();
           }


        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        localVarHeaderParams.put("authCode", authCode);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }
        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams,localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 获取用户登录session-token
     * 获取用户登录session-token
     *
     * @param appToken  appToken (optional)
     * @param loginName 用户名 (optional)
     * @param password  密码 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String loginPostSessionToken(String appToken, String loginName, String password) throws ApiException {
        ApiResponse<UserIdResponse> resp = loginWithHttpInfo(appToken, loginName, password);
        return resp.getHeaders().get("session-token").get(0);
    }

    /**
     * 用户登录
     * 用户登录
     *
     * @param appToken  appToken (optional)
     * @param loginName 用户名 (optional)
     * @param password  密码 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserIdResponse login(String appToken, String loginName, String password) throws ApiException,  CertificateException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyManagementException, KeyStoreException, IOException {
        ApiResponse<UserIdResponse> resp = loginWithHttpInfo(appToken, loginName, password);
        return resp.getData();
    }

    /**
     * 用户登录
     * 用户登录
     *
     * @param appToken  appToken (optional)
     * @param loginName 用户名 (optional)
     * @param password  密码 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserIdResponse> loginWithHttpInfo(String appToken, String loginName, String password) throws ApiException {
        Call call = loginCall(appToken, loginName, password, null, null);
        Type localVarReturnType = new TypeToken<UserIdResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 用户登录 (asynchronously)
     * 用户登录
     *
     * @param appToken  appToken (optional)
     * @param loginName 用户名 (optional)
     * @param password  密码 (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call loginAsync(String appToken, String loginName, String password, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = loginCall(appToken, loginName, password, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
