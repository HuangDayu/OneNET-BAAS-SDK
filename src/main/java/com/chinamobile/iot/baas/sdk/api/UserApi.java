/*
 * 轻应用Baas平台API
 * demo
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.chinamobile.iot.baas.sdk.api;

import com.chinamobile.iot.baas.sdk.ApiCallback;
import com.chinamobile.iot.baas.sdk.ApiClient;
import com.chinamobile.iot.baas.sdk.ApiException;
import com.chinamobile.iot.baas.sdk.ApiResponse;
import com.chinamobile.iot.baas.sdk.Configuration;
import com.chinamobile.iot.baas.sdk.Pair;
import com.chinamobile.iot.baas.sdk.ProgressRequestBody;
import com.chinamobile.iot.baas.sdk.ProgressResponseBody;
import com.chinamobile.iot.baas.sdk.SignatureUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.chinamobile.iot.baas.sdk.model.AddUserRequest;
import com.chinamobile.iot.baas.sdk.model.PageInfoUserDTO;
import com.chinamobile.iot.baas.sdk.model.Password;
import com.chinamobile.iot.baas.sdk.model.RegisterUserRequest;
import com.chinamobile.iot.baas.sdk.model.UpdateUserRequest;
import com.chinamobile.iot.baas.sdk.model.UserDTO;
import com.chinamobile.iot.baas.sdk.model.UserIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi(String basePath,String accessId,String accessKey) {
        this(Configuration.getDefaultApiClient(basePath,accessId,accessKey));
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteUserByUserIdUsingDELETE
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserByUserIdUsingDELETECall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users/child/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"DELETE",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserByUserIdUsingDELETEValidateBeforeCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserByUserIdUsingDELETE(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling deleteUserByUserIdUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserByUserIdUsingDELETECall(userId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 删除子用户
     * 删除子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserByUserIdUsingDELETE(Integer userId, String sessionToken) throws ApiException {
        deleteUserByUserIdUsingDELETEWithHttpInfo(userId, sessionToken);
    }

    /**
     * 删除子用户
     * 删除子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserByUserIdUsingDELETEWithHttpInfo(Integer userId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserByUserIdUsingDELETEValidateBeforeCall(userId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 删除子用户 (asynchronously)
     * 删除子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserByUserIdUsingDELETEAsync(Integer userId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserByUserIdUsingDELETEValidateBeforeCall(userId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableUserUsingPUT
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableUserUsingPUTCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users/{userId}/disable"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableUserUsingPUTValidateBeforeCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling disableUserUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling disableUserUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = disableUserUsingPUTCall(userId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 停用子用户
     * 停用子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableUserUsingPUT(Integer userId, String sessionToken) throws ApiException {
        disableUserUsingPUTWithHttpInfo(userId, sessionToken);
    }

    /**
     * 停用子用户
     * 停用子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableUserUsingPUTWithHttpInfo(Integer userId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = disableUserUsingPUTValidateBeforeCall(userId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 停用子用户 (asynchronously)
     * 停用子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableUserUsingPUTAsync(Integer userId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableUserUsingPUTValidateBeforeCall(userId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for enableUserUsingPUT
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableUserUsingPUTCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users/{userId}/enable"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableUserUsingPUTValidateBeforeCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enableUserUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling enableUserUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = enableUserUsingPUTCall(userId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 启用子用户
     * 启用子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void enableUserUsingPUT(Integer userId, String sessionToken) throws ApiException {
        enableUserUsingPUTWithHttpInfo(userId, sessionToken);
    }

    /**
     * 启用子用户
     * 启用子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> enableUserUsingPUTWithHttpInfo(Integer userId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = enableUserUsingPUTValidateBeforeCall(userId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 启用子用户 (asynchronously)
     * 启用子用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableUserUsingPUTAsync(Integer userId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableUserUsingPUTValidateBeforeCall(userId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUserByUserIdUsingGET
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByUserIdUsingGETCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByUserIdUsingGETValidateBeforeCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserByUserIdUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getUserByUserIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByUserIdUsingGETCall(userId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询单个用户
     * 查询单个用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return UserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserDTO getUserByUserIdUsingGET(Integer userId, String sessionToken) throws ApiException {
        ApiResponse<UserDTO> resp = getUserByUserIdUsingGETWithHttpInfo(userId, sessionToken);
        return resp.getData();
    }

    /**
     * 查询单个用户
     * 查询单个用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserDTO> getUserByUserIdUsingGETWithHttpInfo(Integer userId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserByUserIdUsingGETValidateBeforeCall(userId, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询单个用户 (asynchronously)
     * 查询单个用户
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByUserIdUsingGETAsync(Integer userId, String sessionToken, final ApiCallback<UserDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByUserIdUsingGETValidateBeforeCall(userId, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersUsingGET
     * @param sessionToken session-token (required)
     * @param loginName 登录名 (optional)
     * @param status 状态 (optional)
     * @param email 邮箱 (optional)
     * @param mobile 手机 (optional)
     * @param roleId 角色Id (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersUsingGETCall(String sessionToken, String loginName, String status, String email, String mobile, String roleId, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (loginName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("loginName", loginName));

       if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

       if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

       if (mobile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mobile", mobile));

       if (roleId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("roleId", roleId));

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

       if (loginName != null)
        params.put("loginName",loginName);
       if (status != null)
        params.put("status",status);
       if (email != null)
        params.put("email",email);
       if (mobile != null)
        params.put("mobile",mobile);
       if (roleId != null)
        params.put("roleId",roleId);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersUsingGETValidateBeforeCall(String sessionToken, String loginName, String status, String email, String mobile, String roleId, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling getUsersUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsersUsingGETCall(sessionToken, loginName, status, email, mobile, roleId, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询用户列表
     * 查询用户列表
     * @param sessionToken session-token (required)
     * @param loginName 登录名 (optional)
     * @param status 状态 (optional)
     * @param email 邮箱 (optional)
     * @param mobile 手机 (optional)
     * @param roleId 角色Id (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoUserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoUserDTO getUsersUsingGET(String sessionToken, String loginName, String status, String email, String mobile, String roleId, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoUserDTO> resp = getUsersUsingGETWithHttpInfo(sessionToken, loginName, status, email, mobile, roleId, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询用户列表
     * 查询用户列表
     * @param sessionToken session-token (required)
     * @param loginName 登录名 (optional)
     * @param status 状态 (optional)
     * @param email 邮箱 (optional)
     * @param mobile 手机 (optional)
     * @param roleId 角色Id (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoUserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoUserDTO> getUsersUsingGETWithHttpInfo(String sessionToken, String loginName, String status, String email, String mobile, String roleId, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getUsersUsingGETValidateBeforeCall(sessionToken, loginName, status, email, mobile, roleId, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoUserDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询用户列表 (asynchronously)
     * 查询用户列表
     * @param sessionToken session-token (required)
     * @param loginName 登录名 (optional)
     * @param status 状态 (optional)
     * @param email 邮箱 (optional)
     * @param mobile 手机 (optional)
     * @param roleId 角色Id (optional)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersUsingGETAsync(String sessionToken, String loginName, String status, String email, String mobile, String roleId, String pageNum, String pageSize, final ApiCallback<PageInfoUserDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersUsingGETValidateBeforeCall(sessionToken, loginName, status, email, mobile, roleId, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoUserDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertUserUsingPOST
     * @param addUserRequest addUserRequest (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertUserUsingPOSTCall(AddUserRequest addUserRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addUserRequest;

        // create path and map variables
        String localVarPath = "/v1.0/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertUserUsingPOSTValidateBeforeCall(AddUserRequest addUserRequest, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addUserRequest' is set
        if (addUserRequest == null) {
            throw new ApiException("Missing the required parameter 'addUserRequest' when calling insertUserUsingPOST(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling insertUserUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = insertUserUsingPOSTCall(addUserRequest, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 增加用户
     * 增加用户
     * @param addUserRequest addUserRequest (required)
     * @param sessionToken session-token (required)
     * @return UserIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserIdResponse insertUserUsingPOST(AddUserRequest addUserRequest, String sessionToken) throws ApiException {
        ApiResponse<UserIdResponse> resp = insertUserUsingPOSTWithHttpInfo(addUserRequest, sessionToken);
        return resp.getData();
    }

    /**
     * 增加用户
     * 增加用户
     * @param addUserRequest addUserRequest (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;UserIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserIdResponse> insertUserUsingPOSTWithHttpInfo(AddUserRequest addUserRequest, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = insertUserUsingPOSTValidateBeforeCall(addUserRequest, sessionToken, null, null);
        Type localVarReturnType = new TypeToken<UserIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 增加用户 (asynchronously)
     * 增加用户
     * @param addUserRequest addUserRequest (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertUserUsingPOSTAsync(AddUserRequest addUserRequest, String sessionToken, final ApiCallback<UserIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertUserUsingPOSTValidateBeforeCall(addUserRequest, sessionToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryChildInfoUsingGET
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryChildInfoUsingGETCall(Integer userId, String sessionToken, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users/{userId}/childQuery"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

       if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);
       if (pageNum != null)
        params.put("pageNum",pageNum);
       if (pageSize != null)
        params.put("pageSize",pageSize);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"GET",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryChildInfoUsingGETValidateBeforeCall(Integer userId, String sessionToken, String pageNum, String pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling queryChildInfoUsingGET(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling queryChildInfoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = queryChildInfoUsingGETCall(userId, sessionToken, pageNum, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 查询子用户列表
     * 查询子用户列表
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return PageInfoUserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageInfoUserDTO queryChildInfoUsingGET(Integer userId, String sessionToken, String pageNum, String pageSize) throws ApiException {
        ApiResponse<PageInfoUserDTO> resp = queryChildInfoUsingGETWithHttpInfo(userId, sessionToken, pageNum, pageSize);
        return resp.getData();
    }

    /**
     * 查询子用户列表
     * 查询子用户列表
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @return ApiResponse&lt;PageInfoUserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageInfoUserDTO> queryChildInfoUsingGETWithHttpInfo(Integer userId, String sessionToken, String pageNum, String pageSize) throws ApiException {
        com.squareup.okhttp.Call call = queryChildInfoUsingGETValidateBeforeCall(userId, sessionToken, pageNum, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PageInfoUserDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 查询子用户列表 (asynchronously)
     * 查询子用户列表
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param pageNum 页数 (optional)
     * @param pageSize 每页条数 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryChildInfoUsingGETAsync(Integer userId, String sessionToken, String pageNum, String pageSize, final ApiCallback<PageInfoUserDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryChildInfoUsingGETValidateBeforeCall(userId, sessionToken, pageNum, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageInfoUserDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerUserUsingPOST
     * @param registerUserRequest registerUserRequest (required)
     * @param appToken appToken (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUserUsingPOSTCall(RegisterUserRequest registerUserRequest, String appToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registerUserRequest;

        // create path and map variables
        String localVarPath = "/v1.0/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

       if (appToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appToken", appToken));

        Map<String,Object> params = new HashMap<>();

       if (appToken != null)
        params.put("appToken",appToken);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"POST",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUserUsingPOSTValidateBeforeCall(RegisterUserRequest registerUserRequest, String appToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registerUserRequest' is set
        if (registerUserRequest == null) {
            throw new ApiException("Missing the required parameter 'registerUserRequest' when calling registerUserUsingPOST(Async)");
        }
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling registerUserUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = registerUserUsingPOSTCall(registerUserRequest, appToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 注册用户
     * 注册用户
     * @param registerUserRequest registerUserRequest (required)
     * @param appToken appToken (required)
     * @return UserIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserIdResponse registerUserUsingPOST(RegisterUserRequest registerUserRequest, String appToken) throws ApiException {
        ApiResponse<UserIdResponse> resp = registerUserUsingPOSTWithHttpInfo(registerUserRequest, appToken);
        return resp.getData();
    }

    /**
     * 注册用户
     * 注册用户
     * @param registerUserRequest registerUserRequest (required)
     * @param appToken appToken (required)
     * @return ApiResponse&lt;UserIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserIdResponse> registerUserUsingPOSTWithHttpInfo(RegisterUserRequest registerUserRequest, String appToken) throws ApiException {
        com.squareup.okhttp.Call call = registerUserUsingPOSTValidateBeforeCall(registerUserRequest, appToken, null, null);
        Type localVarReturnType = new TypeToken<UserIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 注册用户 (asynchronously)
     * 注册用户
     * @param registerUserRequest registerUserRequest (required)
     * @param appToken appToken (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUserUsingPOSTAsync(RegisterUserRequest registerUserRequest, String appToken, final ApiCallback<UserIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUserUsingPOSTValidateBeforeCall(registerUserRequest, appToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetPasswordUsingPUT
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetPasswordUsingPUTCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1.0/users/{userId}/resetPassword"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetPasswordUsingPUTValidateBeforeCall(Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resetPasswordUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling resetPasswordUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = resetPasswordUsingPUTCall(userId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 重置子用户密码
     * 重置子用户密码
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resetPasswordUsingPUT(Integer userId, String sessionToken) throws ApiException {
        resetPasswordUsingPUTWithHttpInfo(userId, sessionToken);
    }

    /**
     * 重置子用户密码
     * 重置子用户密码
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resetPasswordUsingPUTWithHttpInfo(Integer userId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = resetPasswordUsingPUTValidateBeforeCall(userId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 重置子用户密码 (asynchronously)
     * 重置子用户密码
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetPasswordUsingPUTAsync(Integer userId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetPasswordUsingPUTValidateBeforeCall(userId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePasswordUsingPUT
     * @param password password (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePasswordUsingPUTCall(Password password, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = password;

        // create path and map variables
        String localVarPath = "/v1.0/users/updatePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();


        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePasswordUsingPUTValidateBeforeCall(Password password, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling updatePasswordUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updatePasswordUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePasswordUsingPUTCall(password, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 修改密码
     * 修改密码
     * @param password password (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePasswordUsingPUT(Password password, String sessionToken) throws ApiException {
        updatePasswordUsingPUTWithHttpInfo(password, sessionToken);
    }

    /**
     * 修改密码
     * 修改密码
     * @param password password (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePasswordUsingPUTWithHttpInfo(Password password, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updatePasswordUsingPUTValidateBeforeCall(password, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 修改密码 (asynchronously)
     * 修改密码
     * @param password password (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePasswordUsingPUTAsync(Password password, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePasswordUsingPUTValidateBeforeCall(password, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateUserUsingPUT
     * @param updateUserRequest updateUserRequest (required)
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserUsingPUTCall(UpdateUserRequest updateUserRequest, Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/v1.0/users/child/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String,Object> params = new HashMap<>();

        if (userId != null)
        params.put("userId",userId);

        String authCode = "";
        try {
            authCode = SignatureUtil.signature(apiClient.getAccessId(), apiClient.getAccessKey(),"PUT",params);
        } catch (Exception e) {
            e.printStackTrace();
        }


        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (sessionToken != null)
        localVarHeaderParams.put("session-token", apiClient.parameterToString(sessionToken));


        localVarHeaderParams.put("authCode", authCode);


        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserUsingPUTValidateBeforeCall(UpdateUserRequest updateUserRequest, Integer userId, String sessionToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUserUsingPUT(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserUsingPUT(Async)");
        }
        
        // verify the required parameter 'sessionToken' is set
        if (sessionToken == null) {
            throw new ApiException("Missing the required parameter 'sessionToken' when calling updateUserUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserUsingPUTCall(updateUserRequest, userId, sessionToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 编辑子用户
     * 编辑子用户
     * @param updateUserRequest updateUserRequest (required)
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUserUsingPUT(UpdateUserRequest updateUserRequest, Integer userId, String sessionToken) throws ApiException {
        updateUserUsingPUTWithHttpInfo(updateUserRequest, userId, sessionToken);
    }

    /**
     * 编辑子用户
     * 编辑子用户
     * @param updateUserRequest updateUserRequest (required)
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserUsingPUTWithHttpInfo(UpdateUserRequest updateUserRequest, Integer userId, String sessionToken) throws ApiException {
        com.squareup.okhttp.Call call = updateUserUsingPUTValidateBeforeCall(updateUserRequest, userId, sessionToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * 编辑子用户 (asynchronously)
     * 编辑子用户
     * @param updateUserRequest updateUserRequest (required)
     * @param userId userId (required)
     * @param sessionToken session-token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserUsingPUTAsync(UpdateUserRequest updateUserRequest, Integer userId, String sessionToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserUsingPUTValidateBeforeCall(updateUserRequest, userId, sessionToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
